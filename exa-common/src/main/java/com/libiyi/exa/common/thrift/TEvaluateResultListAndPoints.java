/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.libiyi.exa.common.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-01-17")
public class TEvaluateResultListAndPoints implements org.apache.thrift.TBase<TEvaluateResultListAndPoints, TEvaluateResultListAndPoints._Fields>, java.io.Serializable, Cloneable, Comparable<TEvaluateResultListAndPoints> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TEvaluateResultListAndPoints");

  private static final org.apache.thrift.protocol.TField TOTAL_POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPoints", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField QUESTION_AND_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("questionAndResult", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TEvaluateResultListAndPointsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TEvaluateResultListAndPointsTupleSchemeFactory();

  public int totalPoints; // required
  public java.util.List<TEvaluateResult> questionAndResult; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOTAL_POINTS((short)1, "totalPoints"),
    QUESTION_AND_RESULT((short)2, "questionAndResult");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOTAL_POINTS
          return TOTAL_POINTS;
        case 2: // QUESTION_AND_RESULT
          return QUESTION_AND_RESULT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALPOINTS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOTAL_POINTS, new org.apache.thrift.meta_data.FieldMetaData("totalPoints", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUESTION_AND_RESULT, new org.apache.thrift.meta_data.FieldMetaData("questionAndResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "TEvaluateResult"))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TEvaluateResultListAndPoints.class, metaDataMap);
  }

  public TEvaluateResultListAndPoints() {
  }

  public TEvaluateResultListAndPoints(
    int totalPoints,
    java.util.List<TEvaluateResult> questionAndResult)
  {
    this();
    this.totalPoints = totalPoints;
    setTotalPointsIsSet(true);
    this.questionAndResult = questionAndResult;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TEvaluateResultListAndPoints(TEvaluateResultListAndPoints other) {
    __isset_bitfield = other.__isset_bitfield;
    this.totalPoints = other.totalPoints;
    if (other.isSetQuestionAndResult()) {
      java.util.List<TEvaluateResult> __this__questionAndResult = new java.util.ArrayList<TEvaluateResult>(other.questionAndResult.size());
      for (TEvaluateResult other_element : other.questionAndResult) {
        __this__questionAndResult.add(new TEvaluateResult(other_element));
      }
      this.questionAndResult = __this__questionAndResult;
    }
  }

  public TEvaluateResultListAndPoints deepCopy() {
    return new TEvaluateResultListAndPoints(this);
  }

  @Override
  public void clear() {
    setTotalPointsIsSet(false);
    this.totalPoints = 0;
    this.questionAndResult = null;
  }

  public int getTotalPoints() {
    return this.totalPoints;
  }

  public TEvaluateResultListAndPoints setTotalPoints(int totalPoints) {
    this.totalPoints = totalPoints;
    setTotalPointsIsSet(true);
    return this;
  }

  public void unsetTotalPoints() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALPOINTS_ISSET_ID);
  }

  /** Returns true if field totalPoints is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPoints() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALPOINTS_ISSET_ID);
  }

  public void setTotalPointsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALPOINTS_ISSET_ID, value);
  }

  public int getQuestionAndResultSize() {
    return (this.questionAndResult == null) ? 0 : this.questionAndResult.size();
  }

  public java.util.Iterator<TEvaluateResult> getQuestionAndResultIterator() {
    return (this.questionAndResult == null) ? null : this.questionAndResult.iterator();
  }

  public void addToQuestionAndResult(TEvaluateResult elem) {
    if (this.questionAndResult == null) {
      this.questionAndResult = new java.util.ArrayList<TEvaluateResult>();
    }
    this.questionAndResult.add(elem);
  }

  public java.util.List<TEvaluateResult> getQuestionAndResult() {
    return this.questionAndResult;
  }

  public TEvaluateResultListAndPoints setQuestionAndResult(java.util.List<TEvaluateResult> questionAndResult) {
    this.questionAndResult = questionAndResult;
    return this;
  }

  public void unsetQuestionAndResult() {
    this.questionAndResult = null;
  }

  /** Returns true if field questionAndResult is set (has been assigned a value) and false otherwise */
  public boolean isSetQuestionAndResult() {
    return this.questionAndResult != null;
  }

  public void setQuestionAndResultIsSet(boolean value) {
    if (!value) {
      this.questionAndResult = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOTAL_POINTS:
      if (value == null) {
        unsetTotalPoints();
      } else {
        setTotalPoints((Integer)value);
      }
      break;

    case QUESTION_AND_RESULT:
      if (value == null) {
        unsetQuestionAndResult();
      } else {
        setQuestionAndResult((java.util.List<TEvaluateResult>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOTAL_POINTS:
      return getTotalPoints();

    case QUESTION_AND_RESULT:
      return getQuestionAndResult();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOTAL_POINTS:
      return isSetTotalPoints();
    case QUESTION_AND_RESULT:
      return isSetQuestionAndResult();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TEvaluateResultListAndPoints)
      return this.equals((TEvaluateResultListAndPoints)that);
    return false;
  }

  public boolean equals(TEvaluateResultListAndPoints that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_totalPoints = true;
    boolean that_present_totalPoints = true;
    if (this_present_totalPoints || that_present_totalPoints) {
      if (!(this_present_totalPoints && that_present_totalPoints))
        return false;
      if (this.totalPoints != that.totalPoints)
        return false;
    }

    boolean this_present_questionAndResult = true && this.isSetQuestionAndResult();
    boolean that_present_questionAndResult = true && that.isSetQuestionAndResult();
    if (this_present_questionAndResult || that_present_questionAndResult) {
      if (!(this_present_questionAndResult && that_present_questionAndResult))
        return false;
      if (!this.questionAndResult.equals(that.questionAndResult))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + totalPoints;

    hashCode = hashCode * 8191 + ((isSetQuestionAndResult()) ? 131071 : 524287);
    if (isSetQuestionAndResult())
      hashCode = hashCode * 8191 + questionAndResult.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TEvaluateResultListAndPoints other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTotalPoints()).compareTo(other.isSetTotalPoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPoints, other.totalPoints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuestionAndResult()).compareTo(other.isSetQuestionAndResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuestionAndResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questionAndResult, other.questionAndResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TEvaluateResultListAndPoints(");
    boolean first = true;

    sb.append("totalPoints:");
    sb.append(this.totalPoints);
    first = false;
    if (!first) sb.append(", ");
    sb.append("questionAndResult:");
    if (this.questionAndResult == null) {
      sb.append("null");
    } else {
      sb.append(this.questionAndResult);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TEvaluateResultListAndPointsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TEvaluateResultListAndPointsStandardScheme getScheme() {
      return new TEvaluateResultListAndPointsStandardScheme();
    }
  }

  private static class TEvaluateResultListAndPointsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TEvaluateResultListAndPoints> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TEvaluateResultListAndPoints struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOTAL_POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalPoints = iprot.readI32();
              struct.setTotalPointsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUESTION_AND_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                struct.questionAndResult = new java.util.ArrayList<TEvaluateResult>(_list80.size);
                TEvaluateResult _elem81;
                for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                {
                  _elem81 = new TEvaluateResult();
                  _elem81.read(iprot);
                  struct.questionAndResult.add(_elem81);
                }
                iprot.readListEnd();
              }
              struct.setQuestionAndResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TEvaluateResultListAndPoints struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TOTAL_POINTS_FIELD_DESC);
      oprot.writeI32(struct.totalPoints);
      oprot.writeFieldEnd();
      if (struct.questionAndResult != null) {
        oprot.writeFieldBegin(QUESTION_AND_RESULT_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.questionAndResult.size()));
          for (TEvaluateResult _iter83 : struct.questionAndResult)
          {
            _iter83.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TEvaluateResultListAndPointsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TEvaluateResultListAndPointsTupleScheme getScheme() {
      return new TEvaluateResultListAndPointsTupleScheme();
    }
  }

  private static class TEvaluateResultListAndPointsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TEvaluateResultListAndPoints> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TEvaluateResultListAndPoints struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTotalPoints()) {
        optionals.set(0);
      }
      if (struct.isSetQuestionAndResult()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetTotalPoints()) {
        oprot.writeI32(struct.totalPoints);
      }
      if (struct.isSetQuestionAndResult()) {
        {
          oprot.writeI32(struct.questionAndResult.size());
          for (TEvaluateResult _iter84 : struct.questionAndResult)
          {
            _iter84.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TEvaluateResultListAndPoints struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.totalPoints = iprot.readI32();
        struct.setTotalPointsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.questionAndResult = new java.util.ArrayList<TEvaluateResult>(_list85.size);
          TEvaluateResult _elem86;
          for (int _i87 = 0; _i87 < _list85.size; ++_i87)
          {
            _elem86 = new TEvaluateResult();
            _elem86.read(iprot);
            struct.questionAndResult.add(_elem86);
          }
        }
        struct.setQuestionAndResultIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

