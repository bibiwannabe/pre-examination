/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.libiyi.exa.common.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-03-07")
public class TPaperQuestionData implements org.apache.thrift.TBase<TPaperQuestionData, TPaperQuestionData._Fields>, java.io.Serializable, Cloneable, Comparable<TPaperQuestionData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPaperQuestionData");

  private static final org.apache.thrift.protocol.TField PAPER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paperId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SUBJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subjectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField QUESTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("questionId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField QUESTION_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("questionContent", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TPaperQuestionDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TPaperQuestionDataTupleSchemeFactory();

  public int paperId; // required
  public int subjectId; // required
  public int questionId; // required
  public String questionContent; // required
  public int count; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PAPER_ID((short)1, "paperId"),
    SUBJECT_ID((short)2, "subjectId"),
    QUESTION_ID((short)3, "questionId"),
    QUESTION_CONTENT((short)4, "questionContent"),
    COUNT((short)5, "count");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAPER_ID
          return PAPER_ID;
        case 2: // SUBJECT_ID
          return SUBJECT_ID;
        case 3: // QUESTION_ID
          return QUESTION_ID;
        case 4: // QUESTION_CONTENT
          return QUESTION_CONTENT;
        case 5: // COUNT
          return COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PAPERID_ISSET_ID = 0;
  private static final int __SUBJECTID_ISSET_ID = 1;
  private static final int __QUESTIONID_ISSET_ID = 2;
  private static final int __COUNT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAPER_ID, new org.apache.thrift.meta_data.FieldMetaData("paperId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUBJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("subjectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUESTION_ID, new org.apache.thrift.meta_data.FieldMetaData("questionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUESTION_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("questionContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPaperQuestionData.class, metaDataMap);
  }

  public TPaperQuestionData() {
  }

  public TPaperQuestionData(
    int paperId,
    int subjectId,
    int questionId,
    String questionContent,
    int count)
  {
    this();
    this.paperId = paperId;
    setPaperIdIsSet(true);
    this.subjectId = subjectId;
    setSubjectIdIsSet(true);
    this.questionId = questionId;
    setQuestionIdIsSet(true);
    this.questionContent = questionContent;
    this.count = count;
    setCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPaperQuestionData(TPaperQuestionData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.paperId = other.paperId;
    this.subjectId = other.subjectId;
    this.questionId = other.questionId;
    if (other.isSetQuestionContent()) {
      this.questionContent = other.questionContent;
    }
    this.count = other.count;
  }

  public TPaperQuestionData deepCopy() {
    return new TPaperQuestionData(this);
  }

  @Override
  public void clear() {
    setPaperIdIsSet(false);
    this.paperId = 0;
    setSubjectIdIsSet(false);
    this.subjectId = 0;
    setQuestionIdIsSet(false);
    this.questionId = 0;
    this.questionContent = null;
    setCountIsSet(false);
    this.count = 0;
  }

  public int getPaperId() {
    return this.paperId;
  }

  public TPaperQuestionData setPaperId(int paperId) {
    this.paperId = paperId;
    setPaperIdIsSet(true);
    return this;
  }

  public void unsetPaperId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAPERID_ISSET_ID);
  }

  /** Returns true if field paperId is set (has been assigned a value) and false otherwise */
  public boolean isSetPaperId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAPERID_ISSET_ID);
  }

  public void setPaperIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAPERID_ISSET_ID, value);
  }

  public int getSubjectId() {
    return this.subjectId;
  }

  public TPaperQuestionData setSubjectId(int subjectId) {
    this.subjectId = subjectId;
    setSubjectIdIsSet(true);
    return this;
  }

  public void unsetSubjectId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUBJECTID_ISSET_ID);
  }

  /** Returns true if field subjectId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubjectId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUBJECTID_ISSET_ID);
  }

  public void setSubjectIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUBJECTID_ISSET_ID, value);
  }

  public int getQuestionId() {
    return this.questionId;
  }

  public TPaperQuestionData setQuestionId(int questionId) {
    this.questionId = questionId;
    setQuestionIdIsSet(true);
    return this;
  }

  public void unsetQuestionId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QUESTIONID_ISSET_ID);
  }

  /** Returns true if field questionId is set (has been assigned a value) and false otherwise */
  public boolean isSetQuestionId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QUESTIONID_ISSET_ID);
  }

  public void setQuestionIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QUESTIONID_ISSET_ID, value);
  }

  public String getQuestionContent() {
    return this.questionContent;
  }

  public TPaperQuestionData setQuestionContent(String questionContent) {
    this.questionContent = questionContent;
    return this;
  }

  public void unsetQuestionContent() {
    this.questionContent = null;
  }

  /** Returns true if field questionContent is set (has been assigned a value) and false otherwise */
  public boolean isSetQuestionContent() {
    return this.questionContent != null;
  }

  public void setQuestionContentIsSet(boolean value) {
    if (!value) {
      this.questionContent = null;
    }
  }

  public int getCount() {
    return this.count;
  }

  public TPaperQuestionData setCount(int count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PAPER_ID:
      if (value == null) {
        unsetPaperId();
      } else {
        setPaperId((Integer)value);
      }
      break;

    case SUBJECT_ID:
      if (value == null) {
        unsetSubjectId();
      } else {
        setSubjectId((Integer)value);
      }
      break;

    case QUESTION_ID:
      if (value == null) {
        unsetQuestionId();
      } else {
        setQuestionId((Integer)value);
      }
      break;

    case QUESTION_CONTENT:
      if (value == null) {
        unsetQuestionContent();
      } else {
        setQuestionContent((String)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PAPER_ID:
      return getPaperId();

    case SUBJECT_ID:
      return getSubjectId();

    case QUESTION_ID:
      return getQuestionId();

    case QUESTION_CONTENT:
      return getQuestionContent();

    case COUNT:
      return getCount();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PAPER_ID:
      return isSetPaperId();
    case SUBJECT_ID:
      return isSetSubjectId();
    case QUESTION_ID:
      return isSetQuestionId();
    case QUESTION_CONTENT:
      return isSetQuestionContent();
    case COUNT:
      return isSetCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPaperQuestionData)
      return this.equals((TPaperQuestionData)that);
    return false;
  }

  public boolean equals(TPaperQuestionData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_paperId = true;
    boolean that_present_paperId = true;
    if (this_present_paperId || that_present_paperId) {
      if (!(this_present_paperId && that_present_paperId))
        return false;
      if (this.paperId != that.paperId)
        return false;
    }

    boolean this_present_subjectId = true;
    boolean that_present_subjectId = true;
    if (this_present_subjectId || that_present_subjectId) {
      if (!(this_present_subjectId && that_present_subjectId))
        return false;
      if (this.subjectId != that.subjectId)
        return false;
    }

    boolean this_present_questionId = true;
    boolean that_present_questionId = true;
    if (this_present_questionId || that_present_questionId) {
      if (!(this_present_questionId && that_present_questionId))
        return false;
      if (this.questionId != that.questionId)
        return false;
    }

    boolean this_present_questionContent = true && this.isSetQuestionContent();
    boolean that_present_questionContent = true && that.isSetQuestionContent();
    if (this_present_questionContent || that_present_questionContent) {
      if (!(this_present_questionContent && that_present_questionContent))
        return false;
      if (!this.questionContent.equals(that.questionContent))
        return false;
    }

    boolean this_present_count = true;
    boolean that_present_count = true;
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + paperId;

    hashCode = hashCode * 8191 + subjectId;

    hashCode = hashCode * 8191 + questionId;

    hashCode = hashCode * 8191 + ((isSetQuestionContent()) ? 131071 : 524287);
    if (isSetQuestionContent())
      hashCode = hashCode * 8191 + questionContent.hashCode();

    hashCode = hashCode * 8191 + count;

    return hashCode;
  }

  @Override
  public int compareTo(TPaperQuestionData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPaperId()).compareTo(other.isSetPaperId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaperId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paperId, other.paperId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubjectId()).compareTo(other.isSetSubjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subjectId, other.subjectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuestionId()).compareTo(other.isSetQuestionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuestionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questionId, other.questionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuestionContent()).compareTo(other.isSetQuestionContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuestionContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questionContent, other.questionContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPaperQuestionData(");
    boolean first = true;

    sb.append("paperId:");
    sb.append(this.paperId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("subjectId:");
    sb.append(this.subjectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("questionId:");
    sb.append(this.questionId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("questionContent:");
    if (this.questionContent == null) {
      sb.append("null");
    } else {
      sb.append(this.questionContent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("count:");
    sb.append(this.count);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPaperQuestionDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TPaperQuestionDataStandardScheme getScheme() {
      return new TPaperQuestionDataStandardScheme();
    }
  }

  private static class TPaperQuestionDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<TPaperQuestionData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPaperQuestionData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAPER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.paperId = iprot.readI32();
              struct.setPaperIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUBJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.subjectId = iprot.readI32();
              struct.setSubjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUESTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.questionId = iprot.readI32();
              struct.setQuestionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // QUESTION_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.questionContent = iprot.readString();
              struct.setQuestionContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.count = iprot.readI32();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPaperQuestionData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PAPER_ID_FIELD_DESC);
      oprot.writeI32(struct.paperId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUBJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.subjectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUESTION_ID_FIELD_DESC);
      oprot.writeI32(struct.questionId);
      oprot.writeFieldEnd();
      if (struct.questionContent != null) {
        oprot.writeFieldBegin(QUESTION_CONTENT_FIELD_DESC);
        oprot.writeString(struct.questionContent);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COUNT_FIELD_DESC);
      oprot.writeI32(struct.count);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPaperQuestionDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TPaperQuestionDataTupleScheme getScheme() {
      return new TPaperQuestionDataTupleScheme();
    }
  }

  private static class TPaperQuestionDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<TPaperQuestionData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPaperQuestionData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPaperId()) {
        optionals.set(0);
      }
      if (struct.isSetSubjectId()) {
        optionals.set(1);
      }
      if (struct.isSetQuestionId()) {
        optionals.set(2);
      }
      if (struct.isSetQuestionContent()) {
        optionals.set(3);
      }
      if (struct.isSetCount()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetPaperId()) {
        oprot.writeI32(struct.paperId);
      }
      if (struct.isSetSubjectId()) {
        oprot.writeI32(struct.subjectId);
      }
      if (struct.isSetQuestionId()) {
        oprot.writeI32(struct.questionId);
      }
      if (struct.isSetQuestionContent()) {
        oprot.writeString(struct.questionContent);
      }
      if (struct.isSetCount()) {
        oprot.writeI32(struct.count);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPaperQuestionData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.paperId = iprot.readI32();
        struct.setPaperIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.subjectId = iprot.readI32();
        struct.setSubjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.questionId = iprot.readI32();
        struct.setQuestionIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.questionContent = iprot.readString();
        struct.setQuestionContentIsSet(true);
      }
      if (incoming.get(4)) {
        struct.count = iprot.readI32();
        struct.setCountIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

