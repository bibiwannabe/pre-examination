/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.libiyi.exa.common.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-01-15")
public class ExaServerService {

  public interface Iface {

    public com.libiyi.exa.common.thrift.TRResponse userRegister(com.libiyi.exa.common.thrift.TPUserRegisterInfo userInfo) throws org.apache.thrift.TException;

    public com.libiyi.exa.common.thrift.TRResponse checkEmailExist(java.lang.String email) throws org.apache.thrift.TException;

    public com.libiyi.exa.common.thrift.TRUserLoginInfo userLogin(com.libiyi.exa.common.thrift.TPUserLoginInfo userLoginInfo) throws org.apache.thrift.TException;

    public com.libiyi.exa.common.thrift.TRResponse sendEmail(java.lang.String email) throws org.apache.thrift.TException;

    public com.libiyi.exa.common.thrift.TRPortalWrongQuestionInfoList getWrongQuestionBySubjectId(com.libiyi.exa.common.thrift.TPPortalWrongQuestionParam worngQuestionParam) throws org.apache.thrift.TException;

    public com.libiyi.exa.common.thrift.TRResponse createAdminInfo(com.libiyi.exa.common.thrift.TPAdminInfo adminInfo) throws org.apache.thrift.TException;

    public com.libiyi.exa.common.thrift.TRAdminInfo getAdminInfo(int userId) throws org.apache.thrift.TException;

    public com.libiyi.exa.common.thrift.TRResponse createSubjectTag(java.lang.String tagName) throws org.apache.thrift.TException;

    public com.libiyi.exa.common.thrift.TRSubjectTagList getAllSubject() throws org.apache.thrift.TException;

    public com.libiyi.exa.common.thrift.TRResponse addQuestion(com.libiyi.exa.common.thrift.TPAdminCreateQuestionInfo questionInfo) throws org.apache.thrift.TException;

    public com.libiyi.exa.common.thrift.TRAdminQuestionInfoList getQuestionListByParam(com.libiyi.exa.common.thrift.TPAdminQuerryQuestionInfo querryParam) throws org.apache.thrift.TException;

    public com.libiyi.exa.common.thrift.TRResponse modifyQuestion(com.libiyi.exa.common.thrift.TPAdminModifyQuestionInfo modifyParam) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void userRegister(com.libiyi.exa.common.thrift.TPUserRegisterInfo userInfo, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse> resultHandler) throws org.apache.thrift.TException;

    public void checkEmailExist(java.lang.String email, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse> resultHandler) throws org.apache.thrift.TException;

    public void userLogin(com.libiyi.exa.common.thrift.TPUserLoginInfo userLoginInfo, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRUserLoginInfo> resultHandler) throws org.apache.thrift.TException;

    public void sendEmail(java.lang.String email, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse> resultHandler) throws org.apache.thrift.TException;

    public void getWrongQuestionBySubjectId(com.libiyi.exa.common.thrift.TPPortalWrongQuestionParam worngQuestionParam, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRPortalWrongQuestionInfoList> resultHandler) throws org.apache.thrift.TException;

    public void createAdminInfo(com.libiyi.exa.common.thrift.TPAdminInfo adminInfo, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse> resultHandler) throws org.apache.thrift.TException;

    public void getAdminInfo(int userId, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRAdminInfo> resultHandler) throws org.apache.thrift.TException;

    public void createSubjectTag(java.lang.String tagName, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse> resultHandler) throws org.apache.thrift.TException;

    public void getAllSubject(org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRSubjectTagList> resultHandler) throws org.apache.thrift.TException;

    public void addQuestion(com.libiyi.exa.common.thrift.TPAdminCreateQuestionInfo questionInfo, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse> resultHandler) throws org.apache.thrift.TException;

    public void getQuestionListByParam(com.libiyi.exa.common.thrift.TPAdminQuerryQuestionInfo querryParam, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRAdminQuestionInfoList> resultHandler) throws org.apache.thrift.TException;

    public void modifyQuestion(com.libiyi.exa.common.thrift.TPAdminModifyQuestionInfo modifyParam, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.libiyi.exa.common.thrift.TRResponse userRegister(com.libiyi.exa.common.thrift.TPUserRegisterInfo userInfo) throws org.apache.thrift.TException
    {
      send_userRegister(userInfo);
      return recv_userRegister();
    }

    public void send_userRegister(com.libiyi.exa.common.thrift.TPUserRegisterInfo userInfo) throws org.apache.thrift.TException
    {
      userRegister_args args = new userRegister_args();
      args.setUserInfo(userInfo);
      sendBase("userRegister", args);
    }

    public com.libiyi.exa.common.thrift.TRResponse recv_userRegister() throws org.apache.thrift.TException
    {
      userRegister_result result = new userRegister_result();
      receiveBase(result, "userRegister");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "userRegister failed: unknown result");
    }

    public com.libiyi.exa.common.thrift.TRResponse checkEmailExist(java.lang.String email) throws org.apache.thrift.TException
    {
      send_checkEmailExist(email);
      return recv_checkEmailExist();
    }

    public void send_checkEmailExist(java.lang.String email) throws org.apache.thrift.TException
    {
      checkEmailExist_args args = new checkEmailExist_args();
      args.setEmail(email);
      sendBase("checkEmailExist", args);
    }

    public com.libiyi.exa.common.thrift.TRResponse recv_checkEmailExist() throws org.apache.thrift.TException
    {
      checkEmailExist_result result = new checkEmailExist_result();
      receiveBase(result, "checkEmailExist");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkEmailExist failed: unknown result");
    }

    public com.libiyi.exa.common.thrift.TRUserLoginInfo userLogin(com.libiyi.exa.common.thrift.TPUserLoginInfo userLoginInfo) throws org.apache.thrift.TException
    {
      send_userLogin(userLoginInfo);
      return recv_userLogin();
    }

    public void send_userLogin(com.libiyi.exa.common.thrift.TPUserLoginInfo userLoginInfo) throws org.apache.thrift.TException
    {
      userLogin_args args = new userLogin_args();
      args.setUserLoginInfo(userLoginInfo);
      sendBase("userLogin", args);
    }

    public com.libiyi.exa.common.thrift.TRUserLoginInfo recv_userLogin() throws org.apache.thrift.TException
    {
      userLogin_result result = new userLogin_result();
      receiveBase(result, "userLogin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "userLogin failed: unknown result");
    }

    public com.libiyi.exa.common.thrift.TRResponse sendEmail(java.lang.String email) throws org.apache.thrift.TException
    {
      send_sendEmail(email);
      return recv_sendEmail();
    }

    public void send_sendEmail(java.lang.String email) throws org.apache.thrift.TException
    {
      sendEmail_args args = new sendEmail_args();
      args.setEmail(email);
      sendBase("sendEmail", args);
    }

    public com.libiyi.exa.common.thrift.TRResponse recv_sendEmail() throws org.apache.thrift.TException
    {
      sendEmail_result result = new sendEmail_result();
      receiveBase(result, "sendEmail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendEmail failed: unknown result");
    }

    public com.libiyi.exa.common.thrift.TRPortalWrongQuestionInfoList getWrongQuestionBySubjectId(com.libiyi.exa.common.thrift.TPPortalWrongQuestionParam worngQuestionParam) throws org.apache.thrift.TException
    {
      send_getWrongQuestionBySubjectId(worngQuestionParam);
      return recv_getWrongQuestionBySubjectId();
    }

    public void send_getWrongQuestionBySubjectId(com.libiyi.exa.common.thrift.TPPortalWrongQuestionParam worngQuestionParam) throws org.apache.thrift.TException
    {
      getWrongQuestionBySubjectId_args args = new getWrongQuestionBySubjectId_args();
      args.setWorngQuestionParam(worngQuestionParam);
      sendBase("getWrongQuestionBySubjectId", args);
    }

    public com.libiyi.exa.common.thrift.TRPortalWrongQuestionInfoList recv_getWrongQuestionBySubjectId() throws org.apache.thrift.TException
    {
      getWrongQuestionBySubjectId_result result = new getWrongQuestionBySubjectId_result();
      receiveBase(result, "getWrongQuestionBySubjectId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWrongQuestionBySubjectId failed: unknown result");
    }

    public com.libiyi.exa.common.thrift.TRResponse createAdminInfo(com.libiyi.exa.common.thrift.TPAdminInfo adminInfo) throws org.apache.thrift.TException
    {
      send_createAdminInfo(adminInfo);
      return recv_createAdminInfo();
    }

    public void send_createAdminInfo(com.libiyi.exa.common.thrift.TPAdminInfo adminInfo) throws org.apache.thrift.TException
    {
      createAdminInfo_args args = new createAdminInfo_args();
      args.setAdminInfo(adminInfo);
      sendBase("createAdminInfo", args);
    }

    public com.libiyi.exa.common.thrift.TRResponse recv_createAdminInfo() throws org.apache.thrift.TException
    {
      createAdminInfo_result result = new createAdminInfo_result();
      receiveBase(result, "createAdminInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createAdminInfo failed: unknown result");
    }

    public com.libiyi.exa.common.thrift.TRAdminInfo getAdminInfo(int userId) throws org.apache.thrift.TException
    {
      send_getAdminInfo(userId);
      return recv_getAdminInfo();
    }

    public void send_getAdminInfo(int userId) throws org.apache.thrift.TException
    {
      getAdminInfo_args args = new getAdminInfo_args();
      args.setUserId(userId);
      sendBase("getAdminInfo", args);
    }

    public com.libiyi.exa.common.thrift.TRAdminInfo recv_getAdminInfo() throws org.apache.thrift.TException
    {
      getAdminInfo_result result = new getAdminInfo_result();
      receiveBase(result, "getAdminInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAdminInfo failed: unknown result");
    }

    public com.libiyi.exa.common.thrift.TRResponse createSubjectTag(java.lang.String tagName) throws org.apache.thrift.TException
    {
      send_createSubjectTag(tagName);
      return recv_createSubjectTag();
    }

    public void send_createSubjectTag(java.lang.String tagName) throws org.apache.thrift.TException
    {
      createSubjectTag_args args = new createSubjectTag_args();
      args.setTagName(tagName);
      sendBase("createSubjectTag", args);
    }

    public com.libiyi.exa.common.thrift.TRResponse recv_createSubjectTag() throws org.apache.thrift.TException
    {
      createSubjectTag_result result = new createSubjectTag_result();
      receiveBase(result, "createSubjectTag");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createSubjectTag failed: unknown result");
    }

    public com.libiyi.exa.common.thrift.TRSubjectTagList getAllSubject() throws org.apache.thrift.TException
    {
      send_getAllSubject();
      return recv_getAllSubject();
    }

    public void send_getAllSubject() throws org.apache.thrift.TException
    {
      getAllSubject_args args = new getAllSubject_args();
      sendBase("getAllSubject", args);
    }

    public com.libiyi.exa.common.thrift.TRSubjectTagList recv_getAllSubject() throws org.apache.thrift.TException
    {
      getAllSubject_result result = new getAllSubject_result();
      receiveBase(result, "getAllSubject");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllSubject failed: unknown result");
    }

    public com.libiyi.exa.common.thrift.TRResponse addQuestion(com.libiyi.exa.common.thrift.TPAdminCreateQuestionInfo questionInfo) throws org.apache.thrift.TException
    {
      send_addQuestion(questionInfo);
      return recv_addQuestion();
    }

    public void send_addQuestion(com.libiyi.exa.common.thrift.TPAdminCreateQuestionInfo questionInfo) throws org.apache.thrift.TException
    {
      addQuestion_args args = new addQuestion_args();
      args.setQuestionInfo(questionInfo);
      sendBase("addQuestion", args);
    }

    public com.libiyi.exa.common.thrift.TRResponse recv_addQuestion() throws org.apache.thrift.TException
    {
      addQuestion_result result = new addQuestion_result();
      receiveBase(result, "addQuestion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addQuestion failed: unknown result");
    }

    public com.libiyi.exa.common.thrift.TRAdminQuestionInfoList getQuestionListByParam(com.libiyi.exa.common.thrift.TPAdminQuerryQuestionInfo querryParam) throws org.apache.thrift.TException
    {
      send_getQuestionListByParam(querryParam);
      return recv_getQuestionListByParam();
    }

    public void send_getQuestionListByParam(com.libiyi.exa.common.thrift.TPAdminQuerryQuestionInfo querryParam) throws org.apache.thrift.TException
    {
      getQuestionListByParam_args args = new getQuestionListByParam_args();
      args.setQuerryParam(querryParam);
      sendBase("getQuestionListByParam", args);
    }

    public com.libiyi.exa.common.thrift.TRAdminQuestionInfoList recv_getQuestionListByParam() throws org.apache.thrift.TException
    {
      getQuestionListByParam_result result = new getQuestionListByParam_result();
      receiveBase(result, "getQuestionListByParam");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getQuestionListByParam failed: unknown result");
    }

    public com.libiyi.exa.common.thrift.TRResponse modifyQuestion(com.libiyi.exa.common.thrift.TPAdminModifyQuestionInfo modifyParam) throws org.apache.thrift.TException
    {
      send_modifyQuestion(modifyParam);
      return recv_modifyQuestion();
    }

    public void send_modifyQuestion(com.libiyi.exa.common.thrift.TPAdminModifyQuestionInfo modifyParam) throws org.apache.thrift.TException
    {
      modifyQuestion_args args = new modifyQuestion_args();
      args.setModifyParam(modifyParam);
      sendBase("modifyQuestion", args);
    }

    public com.libiyi.exa.common.thrift.TRResponse recv_modifyQuestion() throws org.apache.thrift.TException
    {
      modifyQuestion_result result = new modifyQuestion_result();
      receiveBase(result, "modifyQuestion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "modifyQuestion failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void userRegister(com.libiyi.exa.common.thrift.TPUserRegisterInfo userInfo, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      userRegister_call method_call = new userRegister_call(userInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class userRegister_call extends org.apache.thrift.async.TAsyncMethodCall<com.libiyi.exa.common.thrift.TRResponse> {
      private com.libiyi.exa.common.thrift.TPUserRegisterInfo userInfo;
      public userRegister_call(com.libiyi.exa.common.thrift.TPUserRegisterInfo userInfo, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userInfo = userInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("userRegister", org.apache.thrift.protocol.TMessageType.CALL, 0));
        userRegister_args args = new userRegister_args();
        args.setUserInfo(userInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.libiyi.exa.common.thrift.TRResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_userRegister();
      }
    }

    public void checkEmailExist(java.lang.String email, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkEmailExist_call method_call = new checkEmailExist_call(email, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkEmailExist_call extends org.apache.thrift.async.TAsyncMethodCall<com.libiyi.exa.common.thrift.TRResponse> {
      private java.lang.String email;
      public checkEmailExist_call(java.lang.String email, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.email = email;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkEmailExist", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkEmailExist_args args = new checkEmailExist_args();
        args.setEmail(email);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.libiyi.exa.common.thrift.TRResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkEmailExist();
      }
    }

    public void userLogin(com.libiyi.exa.common.thrift.TPUserLoginInfo userLoginInfo, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRUserLoginInfo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      userLogin_call method_call = new userLogin_call(userLoginInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class userLogin_call extends org.apache.thrift.async.TAsyncMethodCall<com.libiyi.exa.common.thrift.TRUserLoginInfo> {
      private com.libiyi.exa.common.thrift.TPUserLoginInfo userLoginInfo;
      public userLogin_call(com.libiyi.exa.common.thrift.TPUserLoginInfo userLoginInfo, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRUserLoginInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userLoginInfo = userLoginInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("userLogin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        userLogin_args args = new userLogin_args();
        args.setUserLoginInfo(userLoginInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.libiyi.exa.common.thrift.TRUserLoginInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_userLogin();
      }
    }

    public void sendEmail(java.lang.String email, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendEmail_call method_call = new sendEmail_call(email, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendEmail_call extends org.apache.thrift.async.TAsyncMethodCall<com.libiyi.exa.common.thrift.TRResponse> {
      private java.lang.String email;
      public sendEmail_call(java.lang.String email, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.email = email;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendEmail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendEmail_args args = new sendEmail_args();
        args.setEmail(email);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.libiyi.exa.common.thrift.TRResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendEmail();
      }
    }

    public void getWrongQuestionBySubjectId(com.libiyi.exa.common.thrift.TPPortalWrongQuestionParam worngQuestionParam, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRPortalWrongQuestionInfoList> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWrongQuestionBySubjectId_call method_call = new getWrongQuestionBySubjectId_call(worngQuestionParam, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWrongQuestionBySubjectId_call extends org.apache.thrift.async.TAsyncMethodCall<com.libiyi.exa.common.thrift.TRPortalWrongQuestionInfoList> {
      private com.libiyi.exa.common.thrift.TPPortalWrongQuestionParam worngQuestionParam;
      public getWrongQuestionBySubjectId_call(com.libiyi.exa.common.thrift.TPPortalWrongQuestionParam worngQuestionParam, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRPortalWrongQuestionInfoList> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.worngQuestionParam = worngQuestionParam;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWrongQuestionBySubjectId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWrongQuestionBySubjectId_args args = new getWrongQuestionBySubjectId_args();
        args.setWorngQuestionParam(worngQuestionParam);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.libiyi.exa.common.thrift.TRPortalWrongQuestionInfoList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWrongQuestionBySubjectId();
      }
    }

    public void createAdminInfo(com.libiyi.exa.common.thrift.TPAdminInfo adminInfo, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createAdminInfo_call method_call = new createAdminInfo_call(adminInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createAdminInfo_call extends org.apache.thrift.async.TAsyncMethodCall<com.libiyi.exa.common.thrift.TRResponse> {
      private com.libiyi.exa.common.thrift.TPAdminInfo adminInfo;
      public createAdminInfo_call(com.libiyi.exa.common.thrift.TPAdminInfo adminInfo, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.adminInfo = adminInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createAdminInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createAdminInfo_args args = new createAdminInfo_args();
        args.setAdminInfo(adminInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.libiyi.exa.common.thrift.TRResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createAdminInfo();
      }
    }

    public void getAdminInfo(int userId, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRAdminInfo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAdminInfo_call method_call = new getAdminInfo_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAdminInfo_call extends org.apache.thrift.async.TAsyncMethodCall<com.libiyi.exa.common.thrift.TRAdminInfo> {
      private int userId;
      public getAdminInfo_call(int userId, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRAdminInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAdminInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAdminInfo_args args = new getAdminInfo_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.libiyi.exa.common.thrift.TRAdminInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAdminInfo();
      }
    }

    public void createSubjectTag(java.lang.String tagName, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createSubjectTag_call method_call = new createSubjectTag_call(tagName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createSubjectTag_call extends org.apache.thrift.async.TAsyncMethodCall<com.libiyi.exa.common.thrift.TRResponse> {
      private java.lang.String tagName;
      public createSubjectTag_call(java.lang.String tagName, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tagName = tagName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createSubjectTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createSubjectTag_args args = new createSubjectTag_args();
        args.setTagName(tagName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.libiyi.exa.common.thrift.TRResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createSubjectTag();
      }
    }

    public void getAllSubject(org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRSubjectTagList> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllSubject_call method_call = new getAllSubject_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllSubject_call extends org.apache.thrift.async.TAsyncMethodCall<com.libiyi.exa.common.thrift.TRSubjectTagList> {
      public getAllSubject_call(org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRSubjectTagList> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllSubject", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllSubject_args args = new getAllSubject_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.libiyi.exa.common.thrift.TRSubjectTagList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllSubject();
      }
    }

    public void addQuestion(com.libiyi.exa.common.thrift.TPAdminCreateQuestionInfo questionInfo, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addQuestion_call method_call = new addQuestion_call(questionInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addQuestion_call extends org.apache.thrift.async.TAsyncMethodCall<com.libiyi.exa.common.thrift.TRResponse> {
      private com.libiyi.exa.common.thrift.TPAdminCreateQuestionInfo questionInfo;
      public addQuestion_call(com.libiyi.exa.common.thrift.TPAdminCreateQuestionInfo questionInfo, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.questionInfo = questionInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addQuestion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addQuestion_args args = new addQuestion_args();
        args.setQuestionInfo(questionInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.libiyi.exa.common.thrift.TRResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addQuestion();
      }
    }

    public void getQuestionListByParam(com.libiyi.exa.common.thrift.TPAdminQuerryQuestionInfo querryParam, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRAdminQuestionInfoList> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getQuestionListByParam_call method_call = new getQuestionListByParam_call(querryParam, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getQuestionListByParam_call extends org.apache.thrift.async.TAsyncMethodCall<com.libiyi.exa.common.thrift.TRAdminQuestionInfoList> {
      private com.libiyi.exa.common.thrift.TPAdminQuerryQuestionInfo querryParam;
      public getQuestionListByParam_call(com.libiyi.exa.common.thrift.TPAdminQuerryQuestionInfo querryParam, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRAdminQuestionInfoList> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.querryParam = querryParam;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getQuestionListByParam", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getQuestionListByParam_args args = new getQuestionListByParam_args();
        args.setQuerryParam(querryParam);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.libiyi.exa.common.thrift.TRAdminQuestionInfoList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getQuestionListByParam();
      }
    }

    public void modifyQuestion(com.libiyi.exa.common.thrift.TPAdminModifyQuestionInfo modifyParam, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      modifyQuestion_call method_call = new modifyQuestion_call(modifyParam, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class modifyQuestion_call extends org.apache.thrift.async.TAsyncMethodCall<com.libiyi.exa.common.thrift.TRResponse> {
      private com.libiyi.exa.common.thrift.TPAdminModifyQuestionInfo modifyParam;
      public modifyQuestion_call(com.libiyi.exa.common.thrift.TPAdminModifyQuestionInfo modifyParam, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.modifyParam = modifyParam;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyQuestion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        modifyQuestion_args args = new modifyQuestion_args();
        args.setModifyParam(modifyParam);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.libiyi.exa.common.thrift.TRResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_modifyQuestion();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("userRegister", new userRegister());
      processMap.put("checkEmailExist", new checkEmailExist());
      processMap.put("userLogin", new userLogin());
      processMap.put("sendEmail", new sendEmail());
      processMap.put("getWrongQuestionBySubjectId", new getWrongQuestionBySubjectId());
      processMap.put("createAdminInfo", new createAdminInfo());
      processMap.put("getAdminInfo", new getAdminInfo());
      processMap.put("createSubjectTag", new createSubjectTag());
      processMap.put("getAllSubject", new getAllSubject());
      processMap.put("addQuestion", new addQuestion());
      processMap.put("getQuestionListByParam", new getQuestionListByParam());
      processMap.put("modifyQuestion", new modifyQuestion());
      return processMap;
    }

    public static class userRegister<I extends Iface> extends org.apache.thrift.ProcessFunction<I, userRegister_args> {
      public userRegister() {
        super("userRegister");
      }

      public userRegister_args getEmptyArgsInstance() {
        return new userRegister_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public userRegister_result getResult(I iface, userRegister_args args) throws org.apache.thrift.TException {
        userRegister_result result = new userRegister_result();
        result.success = iface.userRegister(args.userInfo);
        return result;
      }
    }

    public static class checkEmailExist<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkEmailExist_args> {
      public checkEmailExist() {
        super("checkEmailExist");
      }

      public checkEmailExist_args getEmptyArgsInstance() {
        return new checkEmailExist_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public checkEmailExist_result getResult(I iface, checkEmailExist_args args) throws org.apache.thrift.TException {
        checkEmailExist_result result = new checkEmailExist_result();
        result.success = iface.checkEmailExist(args.email);
        return result;
      }
    }

    public static class userLogin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, userLogin_args> {
      public userLogin() {
        super("userLogin");
      }

      public userLogin_args getEmptyArgsInstance() {
        return new userLogin_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public userLogin_result getResult(I iface, userLogin_args args) throws org.apache.thrift.TException {
        userLogin_result result = new userLogin_result();
        result.success = iface.userLogin(args.userLoginInfo);
        return result;
      }
    }

    public static class sendEmail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendEmail_args> {
      public sendEmail() {
        super("sendEmail");
      }

      public sendEmail_args getEmptyArgsInstance() {
        return new sendEmail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public sendEmail_result getResult(I iface, sendEmail_args args) throws org.apache.thrift.TException {
        sendEmail_result result = new sendEmail_result();
        result.success = iface.sendEmail(args.email);
        return result;
      }
    }

    public static class getWrongQuestionBySubjectId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWrongQuestionBySubjectId_args> {
      public getWrongQuestionBySubjectId() {
        super("getWrongQuestionBySubjectId");
      }

      public getWrongQuestionBySubjectId_args getEmptyArgsInstance() {
        return new getWrongQuestionBySubjectId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getWrongQuestionBySubjectId_result getResult(I iface, getWrongQuestionBySubjectId_args args) throws org.apache.thrift.TException {
        getWrongQuestionBySubjectId_result result = new getWrongQuestionBySubjectId_result();
        result.success = iface.getWrongQuestionBySubjectId(args.worngQuestionParam);
        return result;
      }
    }

    public static class createAdminInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createAdminInfo_args> {
      public createAdminInfo() {
        super("createAdminInfo");
      }

      public createAdminInfo_args getEmptyArgsInstance() {
        return new createAdminInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public createAdminInfo_result getResult(I iface, createAdminInfo_args args) throws org.apache.thrift.TException {
        createAdminInfo_result result = new createAdminInfo_result();
        result.success = iface.createAdminInfo(args.adminInfo);
        return result;
      }
    }

    public static class getAdminInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAdminInfo_args> {
      public getAdminInfo() {
        super("getAdminInfo");
      }

      public getAdminInfo_args getEmptyArgsInstance() {
        return new getAdminInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getAdminInfo_result getResult(I iface, getAdminInfo_args args) throws org.apache.thrift.TException {
        getAdminInfo_result result = new getAdminInfo_result();
        result.success = iface.getAdminInfo(args.userId);
        return result;
      }
    }

    public static class createSubjectTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createSubjectTag_args> {
      public createSubjectTag() {
        super("createSubjectTag");
      }

      public createSubjectTag_args getEmptyArgsInstance() {
        return new createSubjectTag_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public createSubjectTag_result getResult(I iface, createSubjectTag_args args) throws org.apache.thrift.TException {
        createSubjectTag_result result = new createSubjectTag_result();
        result.success = iface.createSubjectTag(args.tagName);
        return result;
      }
    }

    public static class getAllSubject<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllSubject_args> {
      public getAllSubject() {
        super("getAllSubject");
      }

      public getAllSubject_args getEmptyArgsInstance() {
        return new getAllSubject_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getAllSubject_result getResult(I iface, getAllSubject_args args) throws org.apache.thrift.TException {
        getAllSubject_result result = new getAllSubject_result();
        result.success = iface.getAllSubject();
        return result;
      }
    }

    public static class addQuestion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addQuestion_args> {
      public addQuestion() {
        super("addQuestion");
      }

      public addQuestion_args getEmptyArgsInstance() {
        return new addQuestion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public addQuestion_result getResult(I iface, addQuestion_args args) throws org.apache.thrift.TException {
        addQuestion_result result = new addQuestion_result();
        result.success = iface.addQuestion(args.questionInfo);
        return result;
      }
    }

    public static class getQuestionListByParam<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getQuestionListByParam_args> {
      public getQuestionListByParam() {
        super("getQuestionListByParam");
      }

      public getQuestionListByParam_args getEmptyArgsInstance() {
        return new getQuestionListByParam_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getQuestionListByParam_result getResult(I iface, getQuestionListByParam_args args) throws org.apache.thrift.TException {
        getQuestionListByParam_result result = new getQuestionListByParam_result();
        result.success = iface.getQuestionListByParam(args.querryParam);
        return result;
      }
    }

    public static class modifyQuestion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, modifyQuestion_args> {
      public modifyQuestion() {
        super("modifyQuestion");
      }

      public modifyQuestion_args getEmptyArgsInstance() {
        return new modifyQuestion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public modifyQuestion_result getResult(I iface, modifyQuestion_args args) throws org.apache.thrift.TException {
        modifyQuestion_result result = new modifyQuestion_result();
        result.success = iface.modifyQuestion(args.modifyParam);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("userRegister", new userRegister());
      processMap.put("checkEmailExist", new checkEmailExist());
      processMap.put("userLogin", new userLogin());
      processMap.put("sendEmail", new sendEmail());
      processMap.put("getWrongQuestionBySubjectId", new getWrongQuestionBySubjectId());
      processMap.put("createAdminInfo", new createAdminInfo());
      processMap.put("getAdminInfo", new getAdminInfo());
      processMap.put("createSubjectTag", new createSubjectTag());
      processMap.put("getAllSubject", new getAllSubject());
      processMap.put("addQuestion", new addQuestion());
      processMap.put("getQuestionListByParam", new getQuestionListByParam());
      processMap.put("modifyQuestion", new modifyQuestion());
      return processMap;
    }

    public static class userRegister<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, userRegister_args, com.libiyi.exa.common.thrift.TRResponse> {
      public userRegister() {
        super("userRegister");
      }

      public userRegister_args getEmptyArgsInstance() {
        return new userRegister_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse>() { 
          public void onComplete(com.libiyi.exa.common.thrift.TRResponse o) {
            userRegister_result result = new userRegister_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            userRegister_result result = new userRegister_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, userRegister_args args, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse> resultHandler) throws org.apache.thrift.TException {
        iface.userRegister(args.userInfo,resultHandler);
      }
    }

    public static class checkEmailExist<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkEmailExist_args, com.libiyi.exa.common.thrift.TRResponse> {
      public checkEmailExist() {
        super("checkEmailExist");
      }

      public checkEmailExist_args getEmptyArgsInstance() {
        return new checkEmailExist_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse>() { 
          public void onComplete(com.libiyi.exa.common.thrift.TRResponse o) {
            checkEmailExist_result result = new checkEmailExist_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            checkEmailExist_result result = new checkEmailExist_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkEmailExist_args args, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse> resultHandler) throws org.apache.thrift.TException {
        iface.checkEmailExist(args.email,resultHandler);
      }
    }

    public static class userLogin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, userLogin_args, com.libiyi.exa.common.thrift.TRUserLoginInfo> {
      public userLogin() {
        super("userLogin");
      }

      public userLogin_args getEmptyArgsInstance() {
        return new userLogin_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRUserLoginInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRUserLoginInfo>() { 
          public void onComplete(com.libiyi.exa.common.thrift.TRUserLoginInfo o) {
            userLogin_result result = new userLogin_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            userLogin_result result = new userLogin_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, userLogin_args args, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRUserLoginInfo> resultHandler) throws org.apache.thrift.TException {
        iface.userLogin(args.userLoginInfo,resultHandler);
      }
    }

    public static class sendEmail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendEmail_args, com.libiyi.exa.common.thrift.TRResponse> {
      public sendEmail() {
        super("sendEmail");
      }

      public sendEmail_args getEmptyArgsInstance() {
        return new sendEmail_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse>() { 
          public void onComplete(com.libiyi.exa.common.thrift.TRResponse o) {
            sendEmail_result result = new sendEmail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            sendEmail_result result = new sendEmail_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendEmail_args args, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse> resultHandler) throws org.apache.thrift.TException {
        iface.sendEmail(args.email,resultHandler);
      }
    }

    public static class getWrongQuestionBySubjectId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWrongQuestionBySubjectId_args, com.libiyi.exa.common.thrift.TRPortalWrongQuestionInfoList> {
      public getWrongQuestionBySubjectId() {
        super("getWrongQuestionBySubjectId");
      }

      public getWrongQuestionBySubjectId_args getEmptyArgsInstance() {
        return new getWrongQuestionBySubjectId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRPortalWrongQuestionInfoList> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRPortalWrongQuestionInfoList>() { 
          public void onComplete(com.libiyi.exa.common.thrift.TRPortalWrongQuestionInfoList o) {
            getWrongQuestionBySubjectId_result result = new getWrongQuestionBySubjectId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getWrongQuestionBySubjectId_result result = new getWrongQuestionBySubjectId_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWrongQuestionBySubjectId_args args, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRPortalWrongQuestionInfoList> resultHandler) throws org.apache.thrift.TException {
        iface.getWrongQuestionBySubjectId(args.worngQuestionParam,resultHandler);
      }
    }

    public static class createAdminInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createAdminInfo_args, com.libiyi.exa.common.thrift.TRResponse> {
      public createAdminInfo() {
        super("createAdminInfo");
      }

      public createAdminInfo_args getEmptyArgsInstance() {
        return new createAdminInfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse>() { 
          public void onComplete(com.libiyi.exa.common.thrift.TRResponse o) {
            createAdminInfo_result result = new createAdminInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createAdminInfo_result result = new createAdminInfo_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createAdminInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse> resultHandler) throws org.apache.thrift.TException {
        iface.createAdminInfo(args.adminInfo,resultHandler);
      }
    }

    public static class getAdminInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAdminInfo_args, com.libiyi.exa.common.thrift.TRAdminInfo> {
      public getAdminInfo() {
        super("getAdminInfo");
      }

      public getAdminInfo_args getEmptyArgsInstance() {
        return new getAdminInfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRAdminInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRAdminInfo>() { 
          public void onComplete(com.libiyi.exa.common.thrift.TRAdminInfo o) {
            getAdminInfo_result result = new getAdminInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAdminInfo_result result = new getAdminInfo_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAdminInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRAdminInfo> resultHandler) throws org.apache.thrift.TException {
        iface.getAdminInfo(args.userId,resultHandler);
      }
    }

    public static class createSubjectTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createSubjectTag_args, com.libiyi.exa.common.thrift.TRResponse> {
      public createSubjectTag() {
        super("createSubjectTag");
      }

      public createSubjectTag_args getEmptyArgsInstance() {
        return new createSubjectTag_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse>() { 
          public void onComplete(com.libiyi.exa.common.thrift.TRResponse o) {
            createSubjectTag_result result = new createSubjectTag_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createSubjectTag_result result = new createSubjectTag_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createSubjectTag_args args, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse> resultHandler) throws org.apache.thrift.TException {
        iface.createSubjectTag(args.tagName,resultHandler);
      }
    }

    public static class getAllSubject<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllSubject_args, com.libiyi.exa.common.thrift.TRSubjectTagList> {
      public getAllSubject() {
        super("getAllSubject");
      }

      public getAllSubject_args getEmptyArgsInstance() {
        return new getAllSubject_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRSubjectTagList> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRSubjectTagList>() { 
          public void onComplete(com.libiyi.exa.common.thrift.TRSubjectTagList o) {
            getAllSubject_result result = new getAllSubject_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAllSubject_result result = new getAllSubject_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllSubject_args args, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRSubjectTagList> resultHandler) throws org.apache.thrift.TException {
        iface.getAllSubject(resultHandler);
      }
    }

    public static class addQuestion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addQuestion_args, com.libiyi.exa.common.thrift.TRResponse> {
      public addQuestion() {
        super("addQuestion");
      }

      public addQuestion_args getEmptyArgsInstance() {
        return new addQuestion_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse>() { 
          public void onComplete(com.libiyi.exa.common.thrift.TRResponse o) {
            addQuestion_result result = new addQuestion_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addQuestion_result result = new addQuestion_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addQuestion_args args, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse> resultHandler) throws org.apache.thrift.TException {
        iface.addQuestion(args.questionInfo,resultHandler);
      }
    }

    public static class getQuestionListByParam<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getQuestionListByParam_args, com.libiyi.exa.common.thrift.TRAdminQuestionInfoList> {
      public getQuestionListByParam() {
        super("getQuestionListByParam");
      }

      public getQuestionListByParam_args getEmptyArgsInstance() {
        return new getQuestionListByParam_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRAdminQuestionInfoList> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRAdminQuestionInfoList>() { 
          public void onComplete(com.libiyi.exa.common.thrift.TRAdminQuestionInfoList o) {
            getQuestionListByParam_result result = new getQuestionListByParam_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getQuestionListByParam_result result = new getQuestionListByParam_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getQuestionListByParam_args args, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRAdminQuestionInfoList> resultHandler) throws org.apache.thrift.TException {
        iface.getQuestionListByParam(args.querryParam,resultHandler);
      }
    }

    public static class modifyQuestion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, modifyQuestion_args, com.libiyi.exa.common.thrift.TRResponse> {
      public modifyQuestion() {
        super("modifyQuestion");
      }

      public modifyQuestion_args getEmptyArgsInstance() {
        return new modifyQuestion_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse>() { 
          public void onComplete(com.libiyi.exa.common.thrift.TRResponse o) {
            modifyQuestion_result result = new modifyQuestion_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            modifyQuestion_result result = new modifyQuestion_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, modifyQuestion_args args, org.apache.thrift.async.AsyncMethodCallback<com.libiyi.exa.common.thrift.TRResponse> resultHandler) throws org.apache.thrift.TException {
        iface.modifyQuestion(args.modifyParam,resultHandler);
      }
    }

  }

  public static class userRegister_args implements org.apache.thrift.TBase<userRegister_args, userRegister_args._Fields>, java.io.Serializable, Cloneable, Comparable<userRegister_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userRegister_args");

    private static final org.apache.thrift.protocol.TField USER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("userInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new userRegister_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new userRegister_argsTupleSchemeFactory();

    public com.libiyi.exa.common.thrift.TPUserRegisterInfo userInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_INFO((short)1, "userInfo");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_INFO
            return USER_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_INFO, new org.apache.thrift.meta_data.FieldMetaData("userInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.libiyi.exa.common.thrift.TPUserRegisterInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userRegister_args.class, metaDataMap);
    }

    public userRegister_args() {
    }

    public userRegister_args(
      com.libiyi.exa.common.thrift.TPUserRegisterInfo userInfo)
    {
      this();
      this.userInfo = userInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userRegister_args(userRegister_args other) {
      if (other.isSetUserInfo()) {
        this.userInfo = new com.libiyi.exa.common.thrift.TPUserRegisterInfo(other.userInfo);
      }
    }

    public userRegister_args deepCopy() {
      return new userRegister_args(this);
    }

    @Override
    public void clear() {
      this.userInfo = null;
    }

    public com.libiyi.exa.common.thrift.TPUserRegisterInfo getUserInfo() {
      return this.userInfo;
    }

    public userRegister_args setUserInfo(com.libiyi.exa.common.thrift.TPUserRegisterInfo userInfo) {
      this.userInfo = userInfo;
      return this;
    }

    public void unsetUserInfo() {
      this.userInfo = null;
    }

    /** Returns true if field userInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserInfo() {
      return this.userInfo != null;
    }

    public void setUserInfoIsSet(boolean value) {
      if (!value) {
        this.userInfo = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_INFO:
        if (value == null) {
          unsetUserInfo();
        } else {
          setUserInfo((com.libiyi.exa.common.thrift.TPUserRegisterInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_INFO:
        return getUserInfo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_INFO:
        return isSetUserInfo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof userRegister_args)
        return this.equals((userRegister_args)that);
      return false;
    }

    public boolean equals(userRegister_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userInfo = true && this.isSetUserInfo();
      boolean that_present_userInfo = true && that.isSetUserInfo();
      if (this_present_userInfo || that_present_userInfo) {
        if (!(this_present_userInfo && that_present_userInfo))
          return false;
        if (!this.userInfo.equals(that.userInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUserInfo()) ? 131071 : 524287);
      if (isSetUserInfo())
        hashCode = hashCode * 8191 + userInfo.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(userRegister_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserInfo()).compareTo(other.isSetUserInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userInfo, other.userInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("userRegister_args(");
      boolean first = true;

      sb.append("userInfo:");
      if (this.userInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.userInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userInfo != null) {
        userInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userRegister_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public userRegister_argsStandardScheme getScheme() {
        return new userRegister_argsStandardScheme();
      }
    }

    private static class userRegister_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<userRegister_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userRegister_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userInfo = new com.libiyi.exa.common.thrift.TPUserRegisterInfo();
                struct.userInfo.read(iprot);
                struct.setUserInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userRegister_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userInfo != null) {
          oprot.writeFieldBegin(USER_INFO_FIELD_DESC);
          struct.userInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userRegister_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public userRegister_argsTupleScheme getScheme() {
        return new userRegister_argsTupleScheme();
      }
    }

    private static class userRegister_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<userRegister_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userRegister_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserInfo()) {
          struct.userInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userRegister_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userInfo = new com.libiyi.exa.common.thrift.TPUserRegisterInfo();
          struct.userInfo.read(iprot);
          struct.setUserInfoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class userRegister_result implements org.apache.thrift.TBase<userRegister_result, userRegister_result._Fields>, java.io.Serializable, Cloneable, Comparable<userRegister_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userRegister_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new userRegister_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new userRegister_resultTupleSchemeFactory();

    public com.libiyi.exa.common.thrift.TRResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.libiyi.exa.common.thrift.TRResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userRegister_result.class, metaDataMap);
    }

    public userRegister_result() {
    }

    public userRegister_result(
      com.libiyi.exa.common.thrift.TRResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userRegister_result(userRegister_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.libiyi.exa.common.thrift.TRResponse(other.success);
      }
    }

    public userRegister_result deepCopy() {
      return new userRegister_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.libiyi.exa.common.thrift.TRResponse getSuccess() {
      return this.success;
    }

    public userRegister_result setSuccess(com.libiyi.exa.common.thrift.TRResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.libiyi.exa.common.thrift.TRResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof userRegister_result)
        return this.equals((userRegister_result)that);
      return false;
    }

    public boolean equals(userRegister_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(userRegister_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("userRegister_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userRegister_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public userRegister_resultStandardScheme getScheme() {
        return new userRegister_resultStandardScheme();
      }
    }

    private static class userRegister_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<userRegister_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userRegister_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.libiyi.exa.common.thrift.TRResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userRegister_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userRegister_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public userRegister_resultTupleScheme getScheme() {
        return new userRegister_resultTupleScheme();
      }
    }

    private static class userRegister_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<userRegister_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userRegister_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userRegister_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.libiyi.exa.common.thrift.TRResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class checkEmailExist_args implements org.apache.thrift.TBase<checkEmailExist_args, checkEmailExist_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkEmailExist_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkEmailExist_args");

    private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkEmailExist_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkEmailExist_argsTupleSchemeFactory();

    public java.lang.String email; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMAIL((short)1, "email");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMAIL
            return EMAIL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkEmailExist_args.class, metaDataMap);
    }

    public checkEmailExist_args() {
    }

    public checkEmailExist_args(
      java.lang.String email)
    {
      this();
      this.email = email;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkEmailExist_args(checkEmailExist_args other) {
      if (other.isSetEmail()) {
        this.email = other.email;
      }
    }

    public checkEmailExist_args deepCopy() {
      return new checkEmailExist_args(this);
    }

    @Override
    public void clear() {
      this.email = null;
    }

    public java.lang.String getEmail() {
      return this.email;
    }

    public checkEmailExist_args setEmail(java.lang.String email) {
      this.email = email;
      return this;
    }

    public void unsetEmail() {
      this.email = null;
    }

    /** Returns true if field email is set (has been assigned a value) and false otherwise */
    public boolean isSetEmail() {
      return this.email != null;
    }

    public void setEmailIsSet(boolean value) {
      if (!value) {
        this.email = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EMAIL:
        if (value == null) {
          unsetEmail();
        } else {
          setEmail((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EMAIL:
        return getEmail();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EMAIL:
        return isSetEmail();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof checkEmailExist_args)
        return this.equals((checkEmailExist_args)that);
      return false;
    }

    public boolean equals(checkEmailExist_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_email = true && this.isSetEmail();
      boolean that_present_email = true && that.isSetEmail();
      if (this_present_email || that_present_email) {
        if (!(this_present_email && that_present_email))
          return false;
        if (!this.email.equals(that.email))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEmail()) ? 131071 : 524287);
      if (isSetEmail())
        hashCode = hashCode * 8191 + email.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(checkEmailExist_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkEmailExist_args(");
      boolean first = true;

      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkEmailExist_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkEmailExist_argsStandardScheme getScheme() {
        return new checkEmailExist_argsStandardScheme();
      }
    }

    private static class checkEmailExist_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkEmailExist_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkEmailExist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EMAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.email = iprot.readString();
                struct.setEmailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkEmailExist_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.email != null) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkEmailExist_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkEmailExist_argsTupleScheme getScheme() {
        return new checkEmailExist_argsTupleScheme();
      }
    }

    private static class checkEmailExist_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkEmailExist_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkEmailExist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEmail()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEmail()) {
          oprot.writeString(struct.email);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkEmailExist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.email = iprot.readString();
          struct.setEmailIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class checkEmailExist_result implements org.apache.thrift.TBase<checkEmailExist_result, checkEmailExist_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkEmailExist_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkEmailExist_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkEmailExist_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkEmailExist_resultTupleSchemeFactory();

    public com.libiyi.exa.common.thrift.TRResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.libiyi.exa.common.thrift.TRResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkEmailExist_result.class, metaDataMap);
    }

    public checkEmailExist_result() {
    }

    public checkEmailExist_result(
      com.libiyi.exa.common.thrift.TRResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkEmailExist_result(checkEmailExist_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.libiyi.exa.common.thrift.TRResponse(other.success);
      }
    }

    public checkEmailExist_result deepCopy() {
      return new checkEmailExist_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.libiyi.exa.common.thrift.TRResponse getSuccess() {
      return this.success;
    }

    public checkEmailExist_result setSuccess(com.libiyi.exa.common.thrift.TRResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.libiyi.exa.common.thrift.TRResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof checkEmailExist_result)
        return this.equals((checkEmailExist_result)that);
      return false;
    }

    public boolean equals(checkEmailExist_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(checkEmailExist_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkEmailExist_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkEmailExist_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkEmailExist_resultStandardScheme getScheme() {
        return new checkEmailExist_resultStandardScheme();
      }
    }

    private static class checkEmailExist_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkEmailExist_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkEmailExist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.libiyi.exa.common.thrift.TRResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkEmailExist_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkEmailExist_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkEmailExist_resultTupleScheme getScheme() {
        return new checkEmailExist_resultTupleScheme();
      }
    }

    private static class checkEmailExist_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkEmailExist_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkEmailExist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkEmailExist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.libiyi.exa.common.thrift.TRResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class userLogin_args implements org.apache.thrift.TBase<userLogin_args, userLogin_args._Fields>, java.io.Serializable, Cloneable, Comparable<userLogin_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userLogin_args");

    private static final org.apache.thrift.protocol.TField USER_LOGIN_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("userLoginInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new userLogin_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new userLogin_argsTupleSchemeFactory();

    public com.libiyi.exa.common.thrift.TPUserLoginInfo userLoginInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_LOGIN_INFO((short)1, "userLoginInfo");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_LOGIN_INFO
            return USER_LOGIN_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_LOGIN_INFO, new org.apache.thrift.meta_data.FieldMetaData("userLoginInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.libiyi.exa.common.thrift.TPUserLoginInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userLogin_args.class, metaDataMap);
    }

    public userLogin_args() {
    }

    public userLogin_args(
      com.libiyi.exa.common.thrift.TPUserLoginInfo userLoginInfo)
    {
      this();
      this.userLoginInfo = userLoginInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userLogin_args(userLogin_args other) {
      if (other.isSetUserLoginInfo()) {
        this.userLoginInfo = new com.libiyi.exa.common.thrift.TPUserLoginInfo(other.userLoginInfo);
      }
    }

    public userLogin_args deepCopy() {
      return new userLogin_args(this);
    }

    @Override
    public void clear() {
      this.userLoginInfo = null;
    }

    public com.libiyi.exa.common.thrift.TPUserLoginInfo getUserLoginInfo() {
      return this.userLoginInfo;
    }

    public userLogin_args setUserLoginInfo(com.libiyi.exa.common.thrift.TPUserLoginInfo userLoginInfo) {
      this.userLoginInfo = userLoginInfo;
      return this;
    }

    public void unsetUserLoginInfo() {
      this.userLoginInfo = null;
    }

    /** Returns true if field userLoginInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserLoginInfo() {
      return this.userLoginInfo != null;
    }

    public void setUserLoginInfoIsSet(boolean value) {
      if (!value) {
        this.userLoginInfo = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_LOGIN_INFO:
        if (value == null) {
          unsetUserLoginInfo();
        } else {
          setUserLoginInfo((com.libiyi.exa.common.thrift.TPUserLoginInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_LOGIN_INFO:
        return getUserLoginInfo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_LOGIN_INFO:
        return isSetUserLoginInfo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof userLogin_args)
        return this.equals((userLogin_args)that);
      return false;
    }

    public boolean equals(userLogin_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userLoginInfo = true && this.isSetUserLoginInfo();
      boolean that_present_userLoginInfo = true && that.isSetUserLoginInfo();
      if (this_present_userLoginInfo || that_present_userLoginInfo) {
        if (!(this_present_userLoginInfo && that_present_userLoginInfo))
          return false;
        if (!this.userLoginInfo.equals(that.userLoginInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUserLoginInfo()) ? 131071 : 524287);
      if (isSetUserLoginInfo())
        hashCode = hashCode * 8191 + userLoginInfo.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(userLogin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserLoginInfo()).compareTo(other.isSetUserLoginInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserLoginInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userLoginInfo, other.userLoginInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("userLogin_args(");
      boolean first = true;

      sb.append("userLoginInfo:");
      if (this.userLoginInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.userLoginInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userLoginInfo != null) {
        userLoginInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userLogin_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public userLogin_argsStandardScheme getScheme() {
        return new userLogin_argsStandardScheme();
      }
    }

    private static class userLogin_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<userLogin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userLogin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_LOGIN_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userLoginInfo = new com.libiyi.exa.common.thrift.TPUserLoginInfo();
                struct.userLoginInfo.read(iprot);
                struct.setUserLoginInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userLogin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userLoginInfo != null) {
          oprot.writeFieldBegin(USER_LOGIN_INFO_FIELD_DESC);
          struct.userLoginInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userLogin_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public userLogin_argsTupleScheme getScheme() {
        return new userLogin_argsTupleScheme();
      }
    }

    private static class userLogin_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<userLogin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userLogin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserLoginInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserLoginInfo()) {
          struct.userLoginInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userLogin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userLoginInfo = new com.libiyi.exa.common.thrift.TPUserLoginInfo();
          struct.userLoginInfo.read(iprot);
          struct.setUserLoginInfoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class userLogin_result implements org.apache.thrift.TBase<userLogin_result, userLogin_result._Fields>, java.io.Serializable, Cloneable, Comparable<userLogin_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userLogin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new userLogin_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new userLogin_resultTupleSchemeFactory();

    public com.libiyi.exa.common.thrift.TRUserLoginInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.libiyi.exa.common.thrift.TRUserLoginInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userLogin_result.class, metaDataMap);
    }

    public userLogin_result() {
    }

    public userLogin_result(
      com.libiyi.exa.common.thrift.TRUserLoginInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userLogin_result(userLogin_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.libiyi.exa.common.thrift.TRUserLoginInfo(other.success);
      }
    }

    public userLogin_result deepCopy() {
      return new userLogin_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.libiyi.exa.common.thrift.TRUserLoginInfo getSuccess() {
      return this.success;
    }

    public userLogin_result setSuccess(com.libiyi.exa.common.thrift.TRUserLoginInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.libiyi.exa.common.thrift.TRUserLoginInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof userLogin_result)
        return this.equals((userLogin_result)that);
      return false;
    }

    public boolean equals(userLogin_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(userLogin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("userLogin_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userLogin_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public userLogin_resultStandardScheme getScheme() {
        return new userLogin_resultStandardScheme();
      }
    }

    private static class userLogin_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<userLogin_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userLogin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.libiyi.exa.common.thrift.TRUserLoginInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userLogin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userLogin_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public userLogin_resultTupleScheme getScheme() {
        return new userLogin_resultTupleScheme();
      }
    }

    private static class userLogin_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<userLogin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userLogin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userLogin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.libiyi.exa.common.thrift.TRUserLoginInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sendEmail_args implements org.apache.thrift.TBase<sendEmail_args, sendEmail_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendEmail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendEmail_args");

    private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendEmail_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendEmail_argsTupleSchemeFactory();

    public java.lang.String email; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMAIL((short)1, "email");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMAIL
            return EMAIL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendEmail_args.class, metaDataMap);
    }

    public sendEmail_args() {
    }

    public sendEmail_args(
      java.lang.String email)
    {
      this();
      this.email = email;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendEmail_args(sendEmail_args other) {
      if (other.isSetEmail()) {
        this.email = other.email;
      }
    }

    public sendEmail_args deepCopy() {
      return new sendEmail_args(this);
    }

    @Override
    public void clear() {
      this.email = null;
    }

    public java.lang.String getEmail() {
      return this.email;
    }

    public sendEmail_args setEmail(java.lang.String email) {
      this.email = email;
      return this;
    }

    public void unsetEmail() {
      this.email = null;
    }

    /** Returns true if field email is set (has been assigned a value) and false otherwise */
    public boolean isSetEmail() {
      return this.email != null;
    }

    public void setEmailIsSet(boolean value) {
      if (!value) {
        this.email = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EMAIL:
        if (value == null) {
          unsetEmail();
        } else {
          setEmail((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EMAIL:
        return getEmail();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EMAIL:
        return isSetEmail();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sendEmail_args)
        return this.equals((sendEmail_args)that);
      return false;
    }

    public boolean equals(sendEmail_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_email = true && this.isSetEmail();
      boolean that_present_email = true && that.isSetEmail();
      if (this_present_email || that_present_email) {
        if (!(this_present_email && that_present_email))
          return false;
        if (!this.email.equals(that.email))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEmail()) ? 131071 : 524287);
      if (isSetEmail())
        hashCode = hashCode * 8191 + email.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sendEmail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sendEmail_args(");
      boolean first = true;

      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendEmail_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendEmail_argsStandardScheme getScheme() {
        return new sendEmail_argsStandardScheme();
      }
    }

    private static class sendEmail_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendEmail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendEmail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EMAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.email = iprot.readString();
                struct.setEmailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendEmail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.email != null) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendEmail_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendEmail_argsTupleScheme getScheme() {
        return new sendEmail_argsTupleScheme();
      }
    }

    private static class sendEmail_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendEmail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendEmail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEmail()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEmail()) {
          oprot.writeString(struct.email);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendEmail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.email = iprot.readString();
          struct.setEmailIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sendEmail_result implements org.apache.thrift.TBase<sendEmail_result, sendEmail_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendEmail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendEmail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendEmail_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendEmail_resultTupleSchemeFactory();

    public com.libiyi.exa.common.thrift.TRResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.libiyi.exa.common.thrift.TRResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendEmail_result.class, metaDataMap);
    }

    public sendEmail_result() {
    }

    public sendEmail_result(
      com.libiyi.exa.common.thrift.TRResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendEmail_result(sendEmail_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.libiyi.exa.common.thrift.TRResponse(other.success);
      }
    }

    public sendEmail_result deepCopy() {
      return new sendEmail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.libiyi.exa.common.thrift.TRResponse getSuccess() {
      return this.success;
    }

    public sendEmail_result setSuccess(com.libiyi.exa.common.thrift.TRResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.libiyi.exa.common.thrift.TRResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sendEmail_result)
        return this.equals((sendEmail_result)that);
      return false;
    }

    public boolean equals(sendEmail_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sendEmail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sendEmail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendEmail_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendEmail_resultStandardScheme getScheme() {
        return new sendEmail_resultStandardScheme();
      }
    }

    private static class sendEmail_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendEmail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendEmail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.libiyi.exa.common.thrift.TRResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendEmail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendEmail_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendEmail_resultTupleScheme getScheme() {
        return new sendEmail_resultTupleScheme();
      }
    }

    private static class sendEmail_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendEmail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendEmail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendEmail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.libiyi.exa.common.thrift.TRResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getWrongQuestionBySubjectId_args implements org.apache.thrift.TBase<getWrongQuestionBySubjectId_args, getWrongQuestionBySubjectId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWrongQuestionBySubjectId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWrongQuestionBySubjectId_args");

    private static final org.apache.thrift.protocol.TField WORNG_QUESTION_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("worngQuestionParam", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getWrongQuestionBySubjectId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getWrongQuestionBySubjectId_argsTupleSchemeFactory();

    public com.libiyi.exa.common.thrift.TPPortalWrongQuestionParam worngQuestionParam; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WORNG_QUESTION_PARAM((short)1, "worngQuestionParam");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WORNG_QUESTION_PARAM
            return WORNG_QUESTION_PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WORNG_QUESTION_PARAM, new org.apache.thrift.meta_data.FieldMetaData("worngQuestionParam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.libiyi.exa.common.thrift.TPPortalWrongQuestionParam.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWrongQuestionBySubjectId_args.class, metaDataMap);
    }

    public getWrongQuestionBySubjectId_args() {
    }

    public getWrongQuestionBySubjectId_args(
      com.libiyi.exa.common.thrift.TPPortalWrongQuestionParam worngQuestionParam)
    {
      this();
      this.worngQuestionParam = worngQuestionParam;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWrongQuestionBySubjectId_args(getWrongQuestionBySubjectId_args other) {
      if (other.isSetWorngQuestionParam()) {
        this.worngQuestionParam = new com.libiyi.exa.common.thrift.TPPortalWrongQuestionParam(other.worngQuestionParam);
      }
    }

    public getWrongQuestionBySubjectId_args deepCopy() {
      return new getWrongQuestionBySubjectId_args(this);
    }

    @Override
    public void clear() {
      this.worngQuestionParam = null;
    }

    public com.libiyi.exa.common.thrift.TPPortalWrongQuestionParam getWorngQuestionParam() {
      return this.worngQuestionParam;
    }

    public getWrongQuestionBySubjectId_args setWorngQuestionParam(com.libiyi.exa.common.thrift.TPPortalWrongQuestionParam worngQuestionParam) {
      this.worngQuestionParam = worngQuestionParam;
      return this;
    }

    public void unsetWorngQuestionParam() {
      this.worngQuestionParam = null;
    }

    /** Returns true if field worngQuestionParam is set (has been assigned a value) and false otherwise */
    public boolean isSetWorngQuestionParam() {
      return this.worngQuestionParam != null;
    }

    public void setWorngQuestionParamIsSet(boolean value) {
      if (!value) {
        this.worngQuestionParam = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case WORNG_QUESTION_PARAM:
        if (value == null) {
          unsetWorngQuestionParam();
        } else {
          setWorngQuestionParam((com.libiyi.exa.common.thrift.TPPortalWrongQuestionParam)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case WORNG_QUESTION_PARAM:
        return getWorngQuestionParam();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case WORNG_QUESTION_PARAM:
        return isSetWorngQuestionParam();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getWrongQuestionBySubjectId_args)
        return this.equals((getWrongQuestionBySubjectId_args)that);
      return false;
    }

    public boolean equals(getWrongQuestionBySubjectId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_worngQuestionParam = true && this.isSetWorngQuestionParam();
      boolean that_present_worngQuestionParam = true && that.isSetWorngQuestionParam();
      if (this_present_worngQuestionParam || that_present_worngQuestionParam) {
        if (!(this_present_worngQuestionParam && that_present_worngQuestionParam))
          return false;
        if (!this.worngQuestionParam.equals(that.worngQuestionParam))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetWorngQuestionParam()) ? 131071 : 524287);
      if (isSetWorngQuestionParam())
        hashCode = hashCode * 8191 + worngQuestionParam.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getWrongQuestionBySubjectId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetWorngQuestionParam()).compareTo(other.isSetWorngQuestionParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWorngQuestionParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.worngQuestionParam, other.worngQuestionParam);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getWrongQuestionBySubjectId_args(");
      boolean first = true;

      sb.append("worngQuestionParam:");
      if (this.worngQuestionParam == null) {
        sb.append("null");
      } else {
        sb.append(this.worngQuestionParam);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (worngQuestionParam != null) {
        worngQuestionParam.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWrongQuestionBySubjectId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getWrongQuestionBySubjectId_argsStandardScheme getScheme() {
        return new getWrongQuestionBySubjectId_argsStandardScheme();
      }
    }

    private static class getWrongQuestionBySubjectId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getWrongQuestionBySubjectId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWrongQuestionBySubjectId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WORNG_QUESTION_PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.worngQuestionParam = new com.libiyi.exa.common.thrift.TPPortalWrongQuestionParam();
                struct.worngQuestionParam.read(iprot);
                struct.setWorngQuestionParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWrongQuestionBySubjectId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.worngQuestionParam != null) {
          oprot.writeFieldBegin(WORNG_QUESTION_PARAM_FIELD_DESC);
          struct.worngQuestionParam.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWrongQuestionBySubjectId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getWrongQuestionBySubjectId_argsTupleScheme getScheme() {
        return new getWrongQuestionBySubjectId_argsTupleScheme();
      }
    }

    private static class getWrongQuestionBySubjectId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getWrongQuestionBySubjectId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWrongQuestionBySubjectId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetWorngQuestionParam()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWorngQuestionParam()) {
          struct.worngQuestionParam.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWrongQuestionBySubjectId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.worngQuestionParam = new com.libiyi.exa.common.thrift.TPPortalWrongQuestionParam();
          struct.worngQuestionParam.read(iprot);
          struct.setWorngQuestionParamIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getWrongQuestionBySubjectId_result implements org.apache.thrift.TBase<getWrongQuestionBySubjectId_result, getWrongQuestionBySubjectId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWrongQuestionBySubjectId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWrongQuestionBySubjectId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getWrongQuestionBySubjectId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getWrongQuestionBySubjectId_resultTupleSchemeFactory();

    public com.libiyi.exa.common.thrift.TRPortalWrongQuestionInfoList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.libiyi.exa.common.thrift.TRPortalWrongQuestionInfoList.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWrongQuestionBySubjectId_result.class, metaDataMap);
    }

    public getWrongQuestionBySubjectId_result() {
    }

    public getWrongQuestionBySubjectId_result(
      com.libiyi.exa.common.thrift.TRPortalWrongQuestionInfoList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWrongQuestionBySubjectId_result(getWrongQuestionBySubjectId_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.libiyi.exa.common.thrift.TRPortalWrongQuestionInfoList(other.success);
      }
    }

    public getWrongQuestionBySubjectId_result deepCopy() {
      return new getWrongQuestionBySubjectId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.libiyi.exa.common.thrift.TRPortalWrongQuestionInfoList getSuccess() {
      return this.success;
    }

    public getWrongQuestionBySubjectId_result setSuccess(com.libiyi.exa.common.thrift.TRPortalWrongQuestionInfoList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.libiyi.exa.common.thrift.TRPortalWrongQuestionInfoList)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getWrongQuestionBySubjectId_result)
        return this.equals((getWrongQuestionBySubjectId_result)that);
      return false;
    }

    public boolean equals(getWrongQuestionBySubjectId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getWrongQuestionBySubjectId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getWrongQuestionBySubjectId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWrongQuestionBySubjectId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getWrongQuestionBySubjectId_resultStandardScheme getScheme() {
        return new getWrongQuestionBySubjectId_resultStandardScheme();
      }
    }

    private static class getWrongQuestionBySubjectId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getWrongQuestionBySubjectId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWrongQuestionBySubjectId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.libiyi.exa.common.thrift.TRPortalWrongQuestionInfoList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWrongQuestionBySubjectId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWrongQuestionBySubjectId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getWrongQuestionBySubjectId_resultTupleScheme getScheme() {
        return new getWrongQuestionBySubjectId_resultTupleScheme();
      }
    }

    private static class getWrongQuestionBySubjectId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getWrongQuestionBySubjectId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWrongQuestionBySubjectId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWrongQuestionBySubjectId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.libiyi.exa.common.thrift.TRPortalWrongQuestionInfoList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createAdminInfo_args implements org.apache.thrift.TBase<createAdminInfo_args, createAdminInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<createAdminInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createAdminInfo_args");

    private static final org.apache.thrift.protocol.TField ADMIN_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("adminInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createAdminInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createAdminInfo_argsTupleSchemeFactory();

    public com.libiyi.exa.common.thrift.TPAdminInfo adminInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ADMIN_INFO((short)1, "adminInfo");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ADMIN_INFO
            return ADMIN_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ADMIN_INFO, new org.apache.thrift.meta_data.FieldMetaData("adminInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.libiyi.exa.common.thrift.TPAdminInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createAdminInfo_args.class, metaDataMap);
    }

    public createAdminInfo_args() {
    }

    public createAdminInfo_args(
      com.libiyi.exa.common.thrift.TPAdminInfo adminInfo)
    {
      this();
      this.adminInfo = adminInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createAdminInfo_args(createAdminInfo_args other) {
      if (other.isSetAdminInfo()) {
        this.adminInfo = new com.libiyi.exa.common.thrift.TPAdminInfo(other.adminInfo);
      }
    }

    public createAdminInfo_args deepCopy() {
      return new createAdminInfo_args(this);
    }

    @Override
    public void clear() {
      this.adminInfo = null;
    }

    public com.libiyi.exa.common.thrift.TPAdminInfo getAdminInfo() {
      return this.adminInfo;
    }

    public createAdminInfo_args setAdminInfo(com.libiyi.exa.common.thrift.TPAdminInfo adminInfo) {
      this.adminInfo = adminInfo;
      return this;
    }

    public void unsetAdminInfo() {
      this.adminInfo = null;
    }

    /** Returns true if field adminInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetAdminInfo() {
      return this.adminInfo != null;
    }

    public void setAdminInfoIsSet(boolean value) {
      if (!value) {
        this.adminInfo = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ADMIN_INFO:
        if (value == null) {
          unsetAdminInfo();
        } else {
          setAdminInfo((com.libiyi.exa.common.thrift.TPAdminInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ADMIN_INFO:
        return getAdminInfo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ADMIN_INFO:
        return isSetAdminInfo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createAdminInfo_args)
        return this.equals((createAdminInfo_args)that);
      return false;
    }

    public boolean equals(createAdminInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_adminInfo = true && this.isSetAdminInfo();
      boolean that_present_adminInfo = true && that.isSetAdminInfo();
      if (this_present_adminInfo || that_present_adminInfo) {
        if (!(this_present_adminInfo && that_present_adminInfo))
          return false;
        if (!this.adminInfo.equals(that.adminInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAdminInfo()) ? 131071 : 524287);
      if (isSetAdminInfo())
        hashCode = hashCode * 8191 + adminInfo.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createAdminInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAdminInfo()).compareTo(other.isSetAdminInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdminInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adminInfo, other.adminInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createAdminInfo_args(");
      boolean first = true;

      sb.append("adminInfo:");
      if (this.adminInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.adminInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (adminInfo != null) {
        adminInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createAdminInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createAdminInfo_argsStandardScheme getScheme() {
        return new createAdminInfo_argsStandardScheme();
      }
    }

    private static class createAdminInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createAdminInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createAdminInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ADMIN_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.adminInfo = new com.libiyi.exa.common.thrift.TPAdminInfo();
                struct.adminInfo.read(iprot);
                struct.setAdminInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createAdminInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.adminInfo != null) {
          oprot.writeFieldBegin(ADMIN_INFO_FIELD_DESC);
          struct.adminInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createAdminInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createAdminInfo_argsTupleScheme getScheme() {
        return new createAdminInfo_argsTupleScheme();
      }
    }

    private static class createAdminInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createAdminInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createAdminInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAdminInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAdminInfo()) {
          struct.adminInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createAdminInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.adminInfo = new com.libiyi.exa.common.thrift.TPAdminInfo();
          struct.adminInfo.read(iprot);
          struct.setAdminInfoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createAdminInfo_result implements org.apache.thrift.TBase<createAdminInfo_result, createAdminInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<createAdminInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createAdminInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createAdminInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createAdminInfo_resultTupleSchemeFactory();

    public com.libiyi.exa.common.thrift.TRResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.libiyi.exa.common.thrift.TRResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createAdminInfo_result.class, metaDataMap);
    }

    public createAdminInfo_result() {
    }

    public createAdminInfo_result(
      com.libiyi.exa.common.thrift.TRResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createAdminInfo_result(createAdminInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.libiyi.exa.common.thrift.TRResponse(other.success);
      }
    }

    public createAdminInfo_result deepCopy() {
      return new createAdminInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.libiyi.exa.common.thrift.TRResponse getSuccess() {
      return this.success;
    }

    public createAdminInfo_result setSuccess(com.libiyi.exa.common.thrift.TRResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.libiyi.exa.common.thrift.TRResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createAdminInfo_result)
        return this.equals((createAdminInfo_result)that);
      return false;
    }

    public boolean equals(createAdminInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createAdminInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createAdminInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createAdminInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createAdminInfo_resultStandardScheme getScheme() {
        return new createAdminInfo_resultStandardScheme();
      }
    }

    private static class createAdminInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createAdminInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createAdminInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.libiyi.exa.common.thrift.TRResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createAdminInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createAdminInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createAdminInfo_resultTupleScheme getScheme() {
        return new createAdminInfo_resultTupleScheme();
      }
    }

    private static class createAdminInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createAdminInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createAdminInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createAdminInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.libiyi.exa.common.thrift.TRResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAdminInfo_args implements org.apache.thrift.TBase<getAdminInfo_args, getAdminInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAdminInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAdminInfo_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAdminInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAdminInfo_argsTupleSchemeFactory();

    public int userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAdminInfo_args.class, metaDataMap);
    }

    public getAdminInfo_args() {
    }

    public getAdminInfo_args(
      int userId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAdminInfo_args(getAdminInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
    }

    public getAdminInfo_args deepCopy() {
      return new getAdminInfo_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public getAdminInfo_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAdminInfo_args)
        return this.equals((getAdminInfo_args)that);
      return false;
    }

    public boolean equals(getAdminInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + userId;

      return hashCode;
    }

    @Override
    public int compareTo(getAdminInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAdminInfo_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAdminInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAdminInfo_argsStandardScheme getScheme() {
        return new getAdminInfo_argsStandardScheme();
      }
    }

    private static class getAdminInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAdminInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAdminInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAdminInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAdminInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAdminInfo_argsTupleScheme getScheme() {
        return new getAdminInfo_argsTupleScheme();
      }
    }

    private static class getAdminInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAdminInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAdminInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAdminInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAdminInfo_result implements org.apache.thrift.TBase<getAdminInfo_result, getAdminInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAdminInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAdminInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAdminInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAdminInfo_resultTupleSchemeFactory();

    public com.libiyi.exa.common.thrift.TRAdminInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.libiyi.exa.common.thrift.TRAdminInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAdminInfo_result.class, metaDataMap);
    }

    public getAdminInfo_result() {
    }

    public getAdminInfo_result(
      com.libiyi.exa.common.thrift.TRAdminInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAdminInfo_result(getAdminInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.libiyi.exa.common.thrift.TRAdminInfo(other.success);
      }
    }

    public getAdminInfo_result deepCopy() {
      return new getAdminInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.libiyi.exa.common.thrift.TRAdminInfo getSuccess() {
      return this.success;
    }

    public getAdminInfo_result setSuccess(com.libiyi.exa.common.thrift.TRAdminInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.libiyi.exa.common.thrift.TRAdminInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAdminInfo_result)
        return this.equals((getAdminInfo_result)that);
      return false;
    }

    public boolean equals(getAdminInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAdminInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAdminInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAdminInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAdminInfo_resultStandardScheme getScheme() {
        return new getAdminInfo_resultStandardScheme();
      }
    }

    private static class getAdminInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAdminInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAdminInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.libiyi.exa.common.thrift.TRAdminInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAdminInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAdminInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAdminInfo_resultTupleScheme getScheme() {
        return new getAdminInfo_resultTupleScheme();
      }
    }

    private static class getAdminInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAdminInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAdminInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAdminInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.libiyi.exa.common.thrift.TRAdminInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createSubjectTag_args implements org.apache.thrift.TBase<createSubjectTag_args, createSubjectTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<createSubjectTag_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createSubjectTag_args");

    private static final org.apache.thrift.protocol.TField TAG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tagName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createSubjectTag_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createSubjectTag_argsTupleSchemeFactory();

    public java.lang.String tagName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TAG_NAME((short)1, "tagName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TAG_NAME
            return TAG_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TAG_NAME, new org.apache.thrift.meta_data.FieldMetaData("tagName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createSubjectTag_args.class, metaDataMap);
    }

    public createSubjectTag_args() {
    }

    public createSubjectTag_args(
      java.lang.String tagName)
    {
      this();
      this.tagName = tagName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createSubjectTag_args(createSubjectTag_args other) {
      if (other.isSetTagName()) {
        this.tagName = other.tagName;
      }
    }

    public createSubjectTag_args deepCopy() {
      return new createSubjectTag_args(this);
    }

    @Override
    public void clear() {
      this.tagName = null;
    }

    public java.lang.String getTagName() {
      return this.tagName;
    }

    public createSubjectTag_args setTagName(java.lang.String tagName) {
      this.tagName = tagName;
      return this;
    }

    public void unsetTagName() {
      this.tagName = null;
    }

    /** Returns true if field tagName is set (has been assigned a value) and false otherwise */
    public boolean isSetTagName() {
      return this.tagName != null;
    }

    public void setTagNameIsSet(boolean value) {
      if (!value) {
        this.tagName = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TAG_NAME:
        if (value == null) {
          unsetTagName();
        } else {
          setTagName((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TAG_NAME:
        return getTagName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TAG_NAME:
        return isSetTagName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createSubjectTag_args)
        return this.equals((createSubjectTag_args)that);
      return false;
    }

    public boolean equals(createSubjectTag_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_tagName = true && this.isSetTagName();
      boolean that_present_tagName = true && that.isSetTagName();
      if (this_present_tagName || that_present_tagName) {
        if (!(this_present_tagName && that_present_tagName))
          return false;
        if (!this.tagName.equals(that.tagName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTagName()) ? 131071 : 524287);
      if (isSetTagName())
        hashCode = hashCode * 8191 + tagName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createSubjectTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTagName()).compareTo(other.isSetTagName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTagName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagName, other.tagName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createSubjectTag_args(");
      boolean first = true;

      sb.append("tagName:");
      if (this.tagName == null) {
        sb.append("null");
      } else {
        sb.append(this.tagName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createSubjectTag_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createSubjectTag_argsStandardScheme getScheme() {
        return new createSubjectTag_argsStandardScheme();
      }
    }

    private static class createSubjectTag_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createSubjectTag_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createSubjectTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TAG_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tagName = iprot.readString();
                struct.setTagNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createSubjectTag_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tagName != null) {
          oprot.writeFieldBegin(TAG_NAME_FIELD_DESC);
          oprot.writeString(struct.tagName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createSubjectTag_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createSubjectTag_argsTupleScheme getScheme() {
        return new createSubjectTag_argsTupleScheme();
      }
    }

    private static class createSubjectTag_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createSubjectTag_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createSubjectTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTagName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTagName()) {
          oprot.writeString(struct.tagName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createSubjectTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tagName = iprot.readString();
          struct.setTagNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createSubjectTag_result implements org.apache.thrift.TBase<createSubjectTag_result, createSubjectTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<createSubjectTag_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createSubjectTag_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createSubjectTag_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createSubjectTag_resultTupleSchemeFactory();

    public com.libiyi.exa.common.thrift.TRResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.libiyi.exa.common.thrift.TRResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createSubjectTag_result.class, metaDataMap);
    }

    public createSubjectTag_result() {
    }

    public createSubjectTag_result(
      com.libiyi.exa.common.thrift.TRResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createSubjectTag_result(createSubjectTag_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.libiyi.exa.common.thrift.TRResponse(other.success);
      }
    }

    public createSubjectTag_result deepCopy() {
      return new createSubjectTag_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.libiyi.exa.common.thrift.TRResponse getSuccess() {
      return this.success;
    }

    public createSubjectTag_result setSuccess(com.libiyi.exa.common.thrift.TRResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.libiyi.exa.common.thrift.TRResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createSubjectTag_result)
        return this.equals((createSubjectTag_result)that);
      return false;
    }

    public boolean equals(createSubjectTag_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createSubjectTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createSubjectTag_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createSubjectTag_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createSubjectTag_resultStandardScheme getScheme() {
        return new createSubjectTag_resultStandardScheme();
      }
    }

    private static class createSubjectTag_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createSubjectTag_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createSubjectTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.libiyi.exa.common.thrift.TRResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createSubjectTag_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createSubjectTag_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createSubjectTag_resultTupleScheme getScheme() {
        return new createSubjectTag_resultTupleScheme();
      }
    }

    private static class createSubjectTag_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createSubjectTag_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createSubjectTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createSubjectTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.libiyi.exa.common.thrift.TRResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAllSubject_args implements org.apache.thrift.TBase<getAllSubject_args, getAllSubject_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllSubject_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllSubject_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAllSubject_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAllSubject_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllSubject_args.class, metaDataMap);
    }

    public getAllSubject_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllSubject_args(getAllSubject_args other) {
    }

    public getAllSubject_args deepCopy() {
      return new getAllSubject_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllSubject_args)
        return this.equals((getAllSubject_args)that);
      return false;
    }

    public boolean equals(getAllSubject_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(getAllSubject_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAllSubject_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllSubject_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllSubject_argsStandardScheme getScheme() {
        return new getAllSubject_argsStandardScheme();
      }
    }

    private static class getAllSubject_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAllSubject_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllSubject_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllSubject_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllSubject_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllSubject_argsTupleScheme getScheme() {
        return new getAllSubject_argsTupleScheme();
      }
    }

    private static class getAllSubject_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAllSubject_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllSubject_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllSubject_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAllSubject_result implements org.apache.thrift.TBase<getAllSubject_result, getAllSubject_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllSubject_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllSubject_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAllSubject_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAllSubject_resultTupleSchemeFactory();

    public com.libiyi.exa.common.thrift.TRSubjectTagList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.libiyi.exa.common.thrift.TRSubjectTagList.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllSubject_result.class, metaDataMap);
    }

    public getAllSubject_result() {
    }

    public getAllSubject_result(
      com.libiyi.exa.common.thrift.TRSubjectTagList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllSubject_result(getAllSubject_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.libiyi.exa.common.thrift.TRSubjectTagList(other.success);
      }
    }

    public getAllSubject_result deepCopy() {
      return new getAllSubject_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.libiyi.exa.common.thrift.TRSubjectTagList getSuccess() {
      return this.success;
    }

    public getAllSubject_result setSuccess(com.libiyi.exa.common.thrift.TRSubjectTagList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.libiyi.exa.common.thrift.TRSubjectTagList)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllSubject_result)
        return this.equals((getAllSubject_result)that);
      return false;
    }

    public boolean equals(getAllSubject_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAllSubject_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAllSubject_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllSubject_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllSubject_resultStandardScheme getScheme() {
        return new getAllSubject_resultStandardScheme();
      }
    }

    private static class getAllSubject_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAllSubject_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllSubject_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.libiyi.exa.common.thrift.TRSubjectTagList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllSubject_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllSubject_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllSubject_resultTupleScheme getScheme() {
        return new getAllSubject_resultTupleScheme();
      }
    }

    private static class getAllSubject_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAllSubject_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllSubject_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllSubject_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.libiyi.exa.common.thrift.TRSubjectTagList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addQuestion_args implements org.apache.thrift.TBase<addQuestion_args, addQuestion_args._Fields>, java.io.Serializable, Cloneable, Comparable<addQuestion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addQuestion_args");

    private static final org.apache.thrift.protocol.TField QUESTION_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("questionInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addQuestion_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addQuestion_argsTupleSchemeFactory();

    public com.libiyi.exa.common.thrift.TPAdminCreateQuestionInfo questionInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUESTION_INFO((short)1, "questionInfo");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUESTION_INFO
            return QUESTION_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUESTION_INFO, new org.apache.thrift.meta_data.FieldMetaData("questionInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.libiyi.exa.common.thrift.TPAdminCreateQuestionInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addQuestion_args.class, metaDataMap);
    }

    public addQuestion_args() {
    }

    public addQuestion_args(
      com.libiyi.exa.common.thrift.TPAdminCreateQuestionInfo questionInfo)
    {
      this();
      this.questionInfo = questionInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addQuestion_args(addQuestion_args other) {
      if (other.isSetQuestionInfo()) {
        this.questionInfo = new com.libiyi.exa.common.thrift.TPAdminCreateQuestionInfo(other.questionInfo);
      }
    }

    public addQuestion_args deepCopy() {
      return new addQuestion_args(this);
    }

    @Override
    public void clear() {
      this.questionInfo = null;
    }

    public com.libiyi.exa.common.thrift.TPAdminCreateQuestionInfo getQuestionInfo() {
      return this.questionInfo;
    }

    public addQuestion_args setQuestionInfo(com.libiyi.exa.common.thrift.TPAdminCreateQuestionInfo questionInfo) {
      this.questionInfo = questionInfo;
      return this;
    }

    public void unsetQuestionInfo() {
      this.questionInfo = null;
    }

    /** Returns true if field questionInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetQuestionInfo() {
      return this.questionInfo != null;
    }

    public void setQuestionInfoIsSet(boolean value) {
      if (!value) {
        this.questionInfo = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case QUESTION_INFO:
        if (value == null) {
          unsetQuestionInfo();
        } else {
          setQuestionInfo((com.libiyi.exa.common.thrift.TPAdminCreateQuestionInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QUESTION_INFO:
        return getQuestionInfo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QUESTION_INFO:
        return isSetQuestionInfo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addQuestion_args)
        return this.equals((addQuestion_args)that);
      return false;
    }

    public boolean equals(addQuestion_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_questionInfo = true && this.isSetQuestionInfo();
      boolean that_present_questionInfo = true && that.isSetQuestionInfo();
      if (this_present_questionInfo || that_present_questionInfo) {
        if (!(this_present_questionInfo && that_present_questionInfo))
          return false;
        if (!this.questionInfo.equals(that.questionInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQuestionInfo()) ? 131071 : 524287);
      if (isSetQuestionInfo())
        hashCode = hashCode * 8191 + questionInfo.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addQuestion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetQuestionInfo()).compareTo(other.isSetQuestionInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuestionInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questionInfo, other.questionInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addQuestion_args(");
      boolean first = true;

      sb.append("questionInfo:");
      if (this.questionInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.questionInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (questionInfo != null) {
        questionInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addQuestion_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addQuestion_argsStandardScheme getScheme() {
        return new addQuestion_argsStandardScheme();
      }
    }

    private static class addQuestion_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addQuestion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addQuestion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUESTION_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.questionInfo = new com.libiyi.exa.common.thrift.TPAdminCreateQuestionInfo();
                struct.questionInfo.read(iprot);
                struct.setQuestionInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addQuestion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.questionInfo != null) {
          oprot.writeFieldBegin(QUESTION_INFO_FIELD_DESC);
          struct.questionInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addQuestion_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addQuestion_argsTupleScheme getScheme() {
        return new addQuestion_argsTupleScheme();
      }
    }

    private static class addQuestion_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addQuestion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addQuestion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQuestionInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuestionInfo()) {
          struct.questionInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addQuestion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.questionInfo = new com.libiyi.exa.common.thrift.TPAdminCreateQuestionInfo();
          struct.questionInfo.read(iprot);
          struct.setQuestionInfoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addQuestion_result implements org.apache.thrift.TBase<addQuestion_result, addQuestion_result._Fields>, java.io.Serializable, Cloneable, Comparable<addQuestion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addQuestion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addQuestion_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addQuestion_resultTupleSchemeFactory();

    public com.libiyi.exa.common.thrift.TRResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.libiyi.exa.common.thrift.TRResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addQuestion_result.class, metaDataMap);
    }

    public addQuestion_result() {
    }

    public addQuestion_result(
      com.libiyi.exa.common.thrift.TRResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addQuestion_result(addQuestion_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.libiyi.exa.common.thrift.TRResponse(other.success);
      }
    }

    public addQuestion_result deepCopy() {
      return new addQuestion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.libiyi.exa.common.thrift.TRResponse getSuccess() {
      return this.success;
    }

    public addQuestion_result setSuccess(com.libiyi.exa.common.thrift.TRResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.libiyi.exa.common.thrift.TRResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addQuestion_result)
        return this.equals((addQuestion_result)that);
      return false;
    }

    public boolean equals(addQuestion_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addQuestion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addQuestion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addQuestion_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addQuestion_resultStandardScheme getScheme() {
        return new addQuestion_resultStandardScheme();
      }
    }

    private static class addQuestion_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addQuestion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addQuestion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.libiyi.exa.common.thrift.TRResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addQuestion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addQuestion_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addQuestion_resultTupleScheme getScheme() {
        return new addQuestion_resultTupleScheme();
      }
    }

    private static class addQuestion_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addQuestion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addQuestion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addQuestion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.libiyi.exa.common.thrift.TRResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getQuestionListByParam_args implements org.apache.thrift.TBase<getQuestionListByParam_args, getQuestionListByParam_args._Fields>, java.io.Serializable, Cloneable, Comparable<getQuestionListByParam_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getQuestionListByParam_args");

    private static final org.apache.thrift.protocol.TField QUERRY_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("querryParam", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getQuestionListByParam_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getQuestionListByParam_argsTupleSchemeFactory();

    public com.libiyi.exa.common.thrift.TPAdminQuerryQuestionInfo querryParam; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERRY_PARAM((short)1, "querryParam");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERRY_PARAM
            return QUERRY_PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERRY_PARAM, new org.apache.thrift.meta_data.FieldMetaData("querryParam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.libiyi.exa.common.thrift.TPAdminQuerryQuestionInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getQuestionListByParam_args.class, metaDataMap);
    }

    public getQuestionListByParam_args() {
    }

    public getQuestionListByParam_args(
      com.libiyi.exa.common.thrift.TPAdminQuerryQuestionInfo querryParam)
    {
      this();
      this.querryParam = querryParam;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getQuestionListByParam_args(getQuestionListByParam_args other) {
      if (other.isSetQuerryParam()) {
        this.querryParam = new com.libiyi.exa.common.thrift.TPAdminQuerryQuestionInfo(other.querryParam);
      }
    }

    public getQuestionListByParam_args deepCopy() {
      return new getQuestionListByParam_args(this);
    }

    @Override
    public void clear() {
      this.querryParam = null;
    }

    public com.libiyi.exa.common.thrift.TPAdminQuerryQuestionInfo getQuerryParam() {
      return this.querryParam;
    }

    public getQuestionListByParam_args setQuerryParam(com.libiyi.exa.common.thrift.TPAdminQuerryQuestionInfo querryParam) {
      this.querryParam = querryParam;
      return this;
    }

    public void unsetQuerryParam() {
      this.querryParam = null;
    }

    /** Returns true if field querryParam is set (has been assigned a value) and false otherwise */
    public boolean isSetQuerryParam() {
      return this.querryParam != null;
    }

    public void setQuerryParamIsSet(boolean value) {
      if (!value) {
        this.querryParam = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case QUERRY_PARAM:
        if (value == null) {
          unsetQuerryParam();
        } else {
          setQuerryParam((com.libiyi.exa.common.thrift.TPAdminQuerryQuestionInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERRY_PARAM:
        return getQuerryParam();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QUERRY_PARAM:
        return isSetQuerryParam();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getQuestionListByParam_args)
        return this.equals((getQuestionListByParam_args)that);
      return false;
    }

    public boolean equals(getQuestionListByParam_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_querryParam = true && this.isSetQuerryParam();
      boolean that_present_querryParam = true && that.isSetQuerryParam();
      if (this_present_querryParam || that_present_querryParam) {
        if (!(this_present_querryParam && that_present_querryParam))
          return false;
        if (!this.querryParam.equals(that.querryParam))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQuerryParam()) ? 131071 : 524287);
      if (isSetQuerryParam())
        hashCode = hashCode * 8191 + querryParam.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getQuestionListByParam_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetQuerryParam()).compareTo(other.isSetQuerryParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuerryParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.querryParam, other.querryParam);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getQuestionListByParam_args(");
      boolean first = true;

      sb.append("querryParam:");
      if (this.querryParam == null) {
        sb.append("null");
      } else {
        sb.append(this.querryParam);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (querryParam != null) {
        querryParam.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getQuestionListByParam_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getQuestionListByParam_argsStandardScheme getScheme() {
        return new getQuestionListByParam_argsStandardScheme();
      }
    }

    private static class getQuestionListByParam_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getQuestionListByParam_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getQuestionListByParam_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERRY_PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.querryParam = new com.libiyi.exa.common.thrift.TPAdminQuerryQuestionInfo();
                struct.querryParam.read(iprot);
                struct.setQuerryParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getQuestionListByParam_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.querryParam != null) {
          oprot.writeFieldBegin(QUERRY_PARAM_FIELD_DESC);
          struct.querryParam.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getQuestionListByParam_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getQuestionListByParam_argsTupleScheme getScheme() {
        return new getQuestionListByParam_argsTupleScheme();
      }
    }

    private static class getQuestionListByParam_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getQuestionListByParam_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getQuestionListByParam_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQuerryParam()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuerryParam()) {
          struct.querryParam.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getQuestionListByParam_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.querryParam = new com.libiyi.exa.common.thrift.TPAdminQuerryQuestionInfo();
          struct.querryParam.read(iprot);
          struct.setQuerryParamIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getQuestionListByParam_result implements org.apache.thrift.TBase<getQuestionListByParam_result, getQuestionListByParam_result._Fields>, java.io.Serializable, Cloneable, Comparable<getQuestionListByParam_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getQuestionListByParam_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getQuestionListByParam_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getQuestionListByParam_resultTupleSchemeFactory();

    public com.libiyi.exa.common.thrift.TRAdminQuestionInfoList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.libiyi.exa.common.thrift.TRAdminQuestionInfoList.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getQuestionListByParam_result.class, metaDataMap);
    }

    public getQuestionListByParam_result() {
    }

    public getQuestionListByParam_result(
      com.libiyi.exa.common.thrift.TRAdminQuestionInfoList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getQuestionListByParam_result(getQuestionListByParam_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.libiyi.exa.common.thrift.TRAdminQuestionInfoList(other.success);
      }
    }

    public getQuestionListByParam_result deepCopy() {
      return new getQuestionListByParam_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.libiyi.exa.common.thrift.TRAdminQuestionInfoList getSuccess() {
      return this.success;
    }

    public getQuestionListByParam_result setSuccess(com.libiyi.exa.common.thrift.TRAdminQuestionInfoList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.libiyi.exa.common.thrift.TRAdminQuestionInfoList)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getQuestionListByParam_result)
        return this.equals((getQuestionListByParam_result)that);
      return false;
    }

    public boolean equals(getQuestionListByParam_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getQuestionListByParam_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getQuestionListByParam_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getQuestionListByParam_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getQuestionListByParam_resultStandardScheme getScheme() {
        return new getQuestionListByParam_resultStandardScheme();
      }
    }

    private static class getQuestionListByParam_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getQuestionListByParam_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getQuestionListByParam_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.libiyi.exa.common.thrift.TRAdminQuestionInfoList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getQuestionListByParam_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getQuestionListByParam_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getQuestionListByParam_resultTupleScheme getScheme() {
        return new getQuestionListByParam_resultTupleScheme();
      }
    }

    private static class getQuestionListByParam_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getQuestionListByParam_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getQuestionListByParam_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getQuestionListByParam_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.libiyi.exa.common.thrift.TRAdminQuestionInfoList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class modifyQuestion_args implements org.apache.thrift.TBase<modifyQuestion_args, modifyQuestion_args._Fields>, java.io.Serializable, Cloneable, Comparable<modifyQuestion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyQuestion_args");

    private static final org.apache.thrift.protocol.TField MODIFY_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("modifyParam", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new modifyQuestion_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new modifyQuestion_argsTupleSchemeFactory();

    public com.libiyi.exa.common.thrift.TPAdminModifyQuestionInfo modifyParam; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODIFY_PARAM((short)1, "modifyParam");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODIFY_PARAM
            return MODIFY_PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODIFY_PARAM, new org.apache.thrift.meta_data.FieldMetaData("modifyParam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.libiyi.exa.common.thrift.TPAdminModifyQuestionInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyQuestion_args.class, metaDataMap);
    }

    public modifyQuestion_args() {
    }

    public modifyQuestion_args(
      com.libiyi.exa.common.thrift.TPAdminModifyQuestionInfo modifyParam)
    {
      this();
      this.modifyParam = modifyParam;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyQuestion_args(modifyQuestion_args other) {
      if (other.isSetModifyParam()) {
        this.modifyParam = new com.libiyi.exa.common.thrift.TPAdminModifyQuestionInfo(other.modifyParam);
      }
    }

    public modifyQuestion_args deepCopy() {
      return new modifyQuestion_args(this);
    }

    @Override
    public void clear() {
      this.modifyParam = null;
    }

    public com.libiyi.exa.common.thrift.TPAdminModifyQuestionInfo getModifyParam() {
      return this.modifyParam;
    }

    public modifyQuestion_args setModifyParam(com.libiyi.exa.common.thrift.TPAdminModifyQuestionInfo modifyParam) {
      this.modifyParam = modifyParam;
      return this;
    }

    public void unsetModifyParam() {
      this.modifyParam = null;
    }

    /** Returns true if field modifyParam is set (has been assigned a value) and false otherwise */
    public boolean isSetModifyParam() {
      return this.modifyParam != null;
    }

    public void setModifyParamIsSet(boolean value) {
      if (!value) {
        this.modifyParam = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MODIFY_PARAM:
        if (value == null) {
          unsetModifyParam();
        } else {
          setModifyParam((com.libiyi.exa.common.thrift.TPAdminModifyQuestionInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MODIFY_PARAM:
        return getModifyParam();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MODIFY_PARAM:
        return isSetModifyParam();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyQuestion_args)
        return this.equals((modifyQuestion_args)that);
      return false;
    }

    public boolean equals(modifyQuestion_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_modifyParam = true && this.isSetModifyParam();
      boolean that_present_modifyParam = true && that.isSetModifyParam();
      if (this_present_modifyParam || that_present_modifyParam) {
        if (!(this_present_modifyParam && that_present_modifyParam))
          return false;
        if (!this.modifyParam.equals(that.modifyParam))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetModifyParam()) ? 131071 : 524287);
      if (isSetModifyParam())
        hashCode = hashCode * 8191 + modifyParam.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(modifyQuestion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetModifyParam()).compareTo(other.isSetModifyParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModifyParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modifyParam, other.modifyParam);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("modifyQuestion_args(");
      boolean first = true;

      sb.append("modifyParam:");
      if (this.modifyParam == null) {
        sb.append("null");
      } else {
        sb.append(this.modifyParam);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (modifyParam != null) {
        modifyParam.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modifyQuestion_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public modifyQuestion_argsStandardScheme getScheme() {
        return new modifyQuestion_argsStandardScheme();
      }
    }

    private static class modifyQuestion_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<modifyQuestion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modifyQuestion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODIFY_PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.modifyParam = new com.libiyi.exa.common.thrift.TPAdminModifyQuestionInfo();
                struct.modifyParam.read(iprot);
                struct.setModifyParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modifyQuestion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.modifyParam != null) {
          oprot.writeFieldBegin(MODIFY_PARAM_FIELD_DESC);
          struct.modifyParam.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modifyQuestion_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public modifyQuestion_argsTupleScheme getScheme() {
        return new modifyQuestion_argsTupleScheme();
      }
    }

    private static class modifyQuestion_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<modifyQuestion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modifyQuestion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetModifyParam()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetModifyParam()) {
          struct.modifyParam.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modifyQuestion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.modifyParam = new com.libiyi.exa.common.thrift.TPAdminModifyQuestionInfo();
          struct.modifyParam.read(iprot);
          struct.setModifyParamIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class modifyQuestion_result implements org.apache.thrift.TBase<modifyQuestion_result, modifyQuestion_result._Fields>, java.io.Serializable, Cloneable, Comparable<modifyQuestion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyQuestion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new modifyQuestion_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new modifyQuestion_resultTupleSchemeFactory();

    public com.libiyi.exa.common.thrift.TRResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.libiyi.exa.common.thrift.TRResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyQuestion_result.class, metaDataMap);
    }

    public modifyQuestion_result() {
    }

    public modifyQuestion_result(
      com.libiyi.exa.common.thrift.TRResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyQuestion_result(modifyQuestion_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.libiyi.exa.common.thrift.TRResponse(other.success);
      }
    }

    public modifyQuestion_result deepCopy() {
      return new modifyQuestion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.libiyi.exa.common.thrift.TRResponse getSuccess() {
      return this.success;
    }

    public modifyQuestion_result setSuccess(com.libiyi.exa.common.thrift.TRResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.libiyi.exa.common.thrift.TRResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyQuestion_result)
        return this.equals((modifyQuestion_result)that);
      return false;
    }

    public boolean equals(modifyQuestion_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(modifyQuestion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("modifyQuestion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modifyQuestion_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public modifyQuestion_resultStandardScheme getScheme() {
        return new modifyQuestion_resultStandardScheme();
      }
    }

    private static class modifyQuestion_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<modifyQuestion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modifyQuestion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.libiyi.exa.common.thrift.TRResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modifyQuestion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modifyQuestion_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public modifyQuestion_resultTupleScheme getScheme() {
        return new modifyQuestion_resultTupleScheme();
      }
    }

    private static class modifyQuestion_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<modifyQuestion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modifyQuestion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modifyQuestion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.libiyi.exa.common.thrift.TRResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
