/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.libiyi.exa.common.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-01-17")
public class TPortalQuestionPointsAndInfoList implements org.apache.thrift.TBase<TPortalQuestionPointsAndInfoList, TPortalQuestionPointsAndInfoList._Fields>, java.io.Serializable, Cloneable, Comparable<TPortalQuestionPointsAndInfoList> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPortalQuestionPointsAndInfoList");

  private static final org.apache.thrift.protocol.TField QUESTION_INFO_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("questionInfoList", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("point", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TPortalQuestionPointsAndInfoListStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TPortalQuestionPointsAndInfoListTupleSchemeFactory();

  public java.util.List<TPortalQuestionInfo> questionInfoList; // required
  public int point; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    QUESTION_INFO_LIST((short)1, "questionInfoList"),
    POINT((short)2, "point");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUESTION_INFO_LIST
          return QUESTION_INFO_LIST;
        case 2: // POINT
          return POINT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __POINT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUESTION_INFO_LIST, new org.apache.thrift.meta_data.FieldMetaData("questionInfoList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPortalQuestionInfo.class))));
    tmpMap.put(_Fields.POINT, new org.apache.thrift.meta_data.FieldMetaData("point", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPortalQuestionPointsAndInfoList.class, metaDataMap);
  }

  public TPortalQuestionPointsAndInfoList() {
  }

  public TPortalQuestionPointsAndInfoList(
    java.util.List<TPortalQuestionInfo> questionInfoList,
    int point)
  {
    this();
    this.questionInfoList = questionInfoList;
    this.point = point;
    setPointIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPortalQuestionPointsAndInfoList(TPortalQuestionPointsAndInfoList other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetQuestionInfoList()) {
      java.util.List<TPortalQuestionInfo> __this__questionInfoList = new java.util.ArrayList<TPortalQuestionInfo>(other.questionInfoList.size());
      for (TPortalQuestionInfo other_element : other.questionInfoList) {
        __this__questionInfoList.add(new TPortalQuestionInfo(other_element));
      }
      this.questionInfoList = __this__questionInfoList;
    }
    this.point = other.point;
  }

  public TPortalQuestionPointsAndInfoList deepCopy() {
    return new TPortalQuestionPointsAndInfoList(this);
  }

  @Override
  public void clear() {
    this.questionInfoList = null;
    setPointIsSet(false);
    this.point = 0;
  }

  public int getQuestionInfoListSize() {
    return (this.questionInfoList == null) ? 0 : this.questionInfoList.size();
  }

  public java.util.Iterator<TPortalQuestionInfo> getQuestionInfoListIterator() {
    return (this.questionInfoList == null) ? null : this.questionInfoList.iterator();
  }

  public void addToQuestionInfoList(TPortalQuestionInfo elem) {
    if (this.questionInfoList == null) {
      this.questionInfoList = new java.util.ArrayList<TPortalQuestionInfo>();
    }
    this.questionInfoList.add(elem);
  }

  public java.util.List<TPortalQuestionInfo> getQuestionInfoList() {
    return this.questionInfoList;
  }

  public TPortalQuestionPointsAndInfoList setQuestionInfoList(java.util.List<TPortalQuestionInfo> questionInfoList) {
    this.questionInfoList = questionInfoList;
    return this;
  }

  public void unsetQuestionInfoList() {
    this.questionInfoList = null;
  }

  /** Returns true if field questionInfoList is set (has been assigned a value) and false otherwise */
  public boolean isSetQuestionInfoList() {
    return this.questionInfoList != null;
  }

  public void setQuestionInfoListIsSet(boolean value) {
    if (!value) {
      this.questionInfoList = null;
    }
  }

  public int getPoint() {
    return this.point;
  }

  public TPortalQuestionPointsAndInfoList setPoint(int point) {
    this.point = point;
    setPointIsSet(true);
    return this;
  }

  public void unsetPoint() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POINT_ISSET_ID);
  }

  /** Returns true if field point is set (has been assigned a value) and false otherwise */
  public boolean isSetPoint() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POINT_ISSET_ID);
  }

  public void setPointIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POINT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUESTION_INFO_LIST:
      if (value == null) {
        unsetQuestionInfoList();
      } else {
        setQuestionInfoList((java.util.List<TPortalQuestionInfo>)value);
      }
      break;

    case POINT:
      if (value == null) {
        unsetPoint();
      } else {
        setPoint((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUESTION_INFO_LIST:
      return getQuestionInfoList();

    case POINT:
      return getPoint();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUESTION_INFO_LIST:
      return isSetQuestionInfoList();
    case POINT:
      return isSetPoint();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPortalQuestionPointsAndInfoList)
      return this.equals((TPortalQuestionPointsAndInfoList)that);
    return false;
  }

  public boolean equals(TPortalQuestionPointsAndInfoList that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_questionInfoList = true && this.isSetQuestionInfoList();
    boolean that_present_questionInfoList = true && that.isSetQuestionInfoList();
    if (this_present_questionInfoList || that_present_questionInfoList) {
      if (!(this_present_questionInfoList && that_present_questionInfoList))
        return false;
      if (!this.questionInfoList.equals(that.questionInfoList))
        return false;
    }

    boolean this_present_point = true;
    boolean that_present_point = true;
    if (this_present_point || that_present_point) {
      if (!(this_present_point && that_present_point))
        return false;
      if (this.point != that.point)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetQuestionInfoList()) ? 131071 : 524287);
    if (isSetQuestionInfoList())
      hashCode = hashCode * 8191 + questionInfoList.hashCode();

    hashCode = hashCode * 8191 + point;

    return hashCode;
  }

  @Override
  public int compareTo(TPortalQuestionPointsAndInfoList other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetQuestionInfoList()).compareTo(other.isSetQuestionInfoList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuestionInfoList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questionInfoList, other.questionInfoList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoint()).compareTo(other.isSetPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.point, other.point);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPortalQuestionPointsAndInfoList(");
    boolean first = true;

    sb.append("questionInfoList:");
    if (this.questionInfoList == null) {
      sb.append("null");
    } else {
      sb.append(this.questionInfoList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("point:");
    sb.append(this.point);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPortalQuestionPointsAndInfoListStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TPortalQuestionPointsAndInfoListStandardScheme getScheme() {
      return new TPortalQuestionPointsAndInfoListStandardScheme();
    }
  }

  private static class TPortalQuestionPointsAndInfoListStandardScheme extends org.apache.thrift.scheme.StandardScheme<TPortalQuestionPointsAndInfoList> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPortalQuestionPointsAndInfoList struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUESTION_INFO_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                struct.questionInfoList = new java.util.ArrayList<TPortalQuestionInfo>(_list48.size);
                TPortalQuestionInfo _elem49;
                for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                {
                  _elem49 = new TPortalQuestionInfo();
                  _elem49.read(iprot);
                  struct.questionInfoList.add(_elem49);
                }
                iprot.readListEnd();
              }
              struct.setQuestionInfoListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.point = iprot.readI32();
              struct.setPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPortalQuestionPointsAndInfoList struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.questionInfoList != null) {
        oprot.writeFieldBegin(QUESTION_INFO_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.questionInfoList.size()));
          for (TPortalQuestionInfo _iter51 : struct.questionInfoList)
          {
            _iter51.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(POINT_FIELD_DESC);
      oprot.writeI32(struct.point);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPortalQuestionPointsAndInfoListTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TPortalQuestionPointsAndInfoListTupleScheme getScheme() {
      return new TPortalQuestionPointsAndInfoListTupleScheme();
    }
  }

  private static class TPortalQuestionPointsAndInfoListTupleScheme extends org.apache.thrift.scheme.TupleScheme<TPortalQuestionPointsAndInfoList> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPortalQuestionPointsAndInfoList struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetQuestionInfoList()) {
        optionals.set(0);
      }
      if (struct.isSetPoint()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetQuestionInfoList()) {
        {
          oprot.writeI32(struct.questionInfoList.size());
          for (TPortalQuestionInfo _iter52 : struct.questionInfoList)
          {
            _iter52.write(oprot);
          }
        }
      }
      if (struct.isSetPoint()) {
        oprot.writeI32(struct.point);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPortalQuestionPointsAndInfoList struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.questionInfoList = new java.util.ArrayList<TPortalQuestionInfo>(_list53.size);
          TPortalQuestionInfo _elem54;
          for (int _i55 = 0; _i55 < _list53.size; ++_i55)
          {
            _elem54 = new TPortalQuestionInfo();
            _elem54.read(iprot);
            struct.questionInfoList.add(_elem54);
          }
        }
        struct.setQuestionInfoListIsSet(true);
      }
      if (incoming.get(1)) {
        struct.point = iprot.readI32();
        struct.setPointIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

