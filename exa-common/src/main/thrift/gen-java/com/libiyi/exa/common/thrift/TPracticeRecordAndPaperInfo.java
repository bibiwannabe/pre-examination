/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.libiyi.exa.common.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-03-05")
public class TPracticeRecordAndPaperInfo implements org.apache.thrift.TBase<TPracticeRecordAndPaperInfo, TPracticeRecordAndPaperInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TPracticeRecordAndPaperInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPracticeRecordAndPaperInfo");

  private static final org.apache.thrift.protocol.TField RECORD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("recordId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PAPER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paperId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PAPER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("paperName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SUBJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subjectId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField AVG_COUNTS_FIELD_DESC = new org.apache.thrift.protocol.TField("avgCounts", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField COUNTS_FIELD_DESC = new org.apache.thrift.protocol.TField("counts", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TPracticeRecordAndPaperInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TPracticeRecordAndPaperInfoTupleSchemeFactory();

  public int recordId; // required
  public int paperId; // required
  public java.lang.String paperName; // required
  public int subjectId; // required
  public int avgCounts; // required
  public int counts; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RECORD_ID((short)1, "recordId"),
    PAPER_ID((short)2, "paperId"),
    PAPER_NAME((short)3, "paperName"),
    SUBJECT_ID((short)4, "subjectId"),
    AVG_COUNTS((short)5, "avgCounts"),
    COUNTS((short)6, "counts");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RECORD_ID
          return RECORD_ID;
        case 2: // PAPER_ID
          return PAPER_ID;
        case 3: // PAPER_NAME
          return PAPER_NAME;
        case 4: // SUBJECT_ID
          return SUBJECT_ID;
        case 5: // AVG_COUNTS
          return AVG_COUNTS;
        case 6: // COUNTS
          return COUNTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RECORDID_ISSET_ID = 0;
  private static final int __PAPERID_ISSET_ID = 1;
  private static final int __SUBJECTID_ISSET_ID = 2;
  private static final int __AVGCOUNTS_ISSET_ID = 3;
  private static final int __COUNTS_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RECORD_ID, new org.apache.thrift.meta_data.FieldMetaData("recordId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAPER_ID, new org.apache.thrift.meta_data.FieldMetaData("paperId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAPER_NAME, new org.apache.thrift.meta_data.FieldMetaData("paperName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUBJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("subjectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AVG_COUNTS, new org.apache.thrift.meta_data.FieldMetaData("avgCounts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COUNTS, new org.apache.thrift.meta_data.FieldMetaData("counts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPracticeRecordAndPaperInfo.class, metaDataMap);
  }

  public TPracticeRecordAndPaperInfo() {
  }

  public TPracticeRecordAndPaperInfo(
    int recordId,
    int paperId,
    java.lang.String paperName,
    int subjectId,
    int avgCounts,
    int counts)
  {
    this();
    this.recordId = recordId;
    setRecordIdIsSet(true);
    this.paperId = paperId;
    setPaperIdIsSet(true);
    this.paperName = paperName;
    this.subjectId = subjectId;
    setSubjectIdIsSet(true);
    this.avgCounts = avgCounts;
    setAvgCountsIsSet(true);
    this.counts = counts;
    setCountsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPracticeRecordAndPaperInfo(TPracticeRecordAndPaperInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.recordId = other.recordId;
    this.paperId = other.paperId;
    if (other.isSetPaperName()) {
      this.paperName = other.paperName;
    }
    this.subjectId = other.subjectId;
    this.avgCounts = other.avgCounts;
    this.counts = other.counts;
  }

  public TPracticeRecordAndPaperInfo deepCopy() {
    return new TPracticeRecordAndPaperInfo(this);
  }

  @Override
  public void clear() {
    setRecordIdIsSet(false);
    this.recordId = 0;
    setPaperIdIsSet(false);
    this.paperId = 0;
    this.paperName = null;
    setSubjectIdIsSet(false);
    this.subjectId = 0;
    setAvgCountsIsSet(false);
    this.avgCounts = 0;
    setCountsIsSet(false);
    this.counts = 0;
  }

  public int getRecordId() {
    return this.recordId;
  }

  public TPracticeRecordAndPaperInfo setRecordId(int recordId) {
    this.recordId = recordId;
    setRecordIdIsSet(true);
    return this;
  }

  public void unsetRecordId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECORDID_ISSET_ID);
  }

  /** Returns true if field recordId is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECORDID_ISSET_ID);
  }

  public void setRecordIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECORDID_ISSET_ID, value);
  }

  public int getPaperId() {
    return this.paperId;
  }

  public TPracticeRecordAndPaperInfo setPaperId(int paperId) {
    this.paperId = paperId;
    setPaperIdIsSet(true);
    return this;
  }

  public void unsetPaperId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAPERID_ISSET_ID);
  }

  /** Returns true if field paperId is set (has been assigned a value) and false otherwise */
  public boolean isSetPaperId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAPERID_ISSET_ID);
  }

  public void setPaperIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAPERID_ISSET_ID, value);
  }

  public java.lang.String getPaperName() {
    return this.paperName;
  }

  public TPracticeRecordAndPaperInfo setPaperName(java.lang.String paperName) {
    this.paperName = paperName;
    return this;
  }

  public void unsetPaperName() {
    this.paperName = null;
  }

  /** Returns true if field paperName is set (has been assigned a value) and false otherwise */
  public boolean isSetPaperName() {
    return this.paperName != null;
  }

  public void setPaperNameIsSet(boolean value) {
    if (!value) {
      this.paperName = null;
    }
  }

  public int getSubjectId() {
    return this.subjectId;
  }

  public TPracticeRecordAndPaperInfo setSubjectId(int subjectId) {
    this.subjectId = subjectId;
    setSubjectIdIsSet(true);
    return this;
  }

  public void unsetSubjectId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUBJECTID_ISSET_ID);
  }

  /** Returns true if field subjectId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubjectId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUBJECTID_ISSET_ID);
  }

  public void setSubjectIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUBJECTID_ISSET_ID, value);
  }

  public int getAvgCounts() {
    return this.avgCounts;
  }

  public TPracticeRecordAndPaperInfo setAvgCounts(int avgCounts) {
    this.avgCounts = avgCounts;
    setAvgCountsIsSet(true);
    return this;
  }

  public void unsetAvgCounts() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AVGCOUNTS_ISSET_ID);
  }

  /** Returns true if field avgCounts is set (has been assigned a value) and false otherwise */
  public boolean isSetAvgCounts() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AVGCOUNTS_ISSET_ID);
  }

  public void setAvgCountsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AVGCOUNTS_ISSET_ID, value);
  }

  public int getCounts() {
    return this.counts;
  }

  public TPracticeRecordAndPaperInfo setCounts(int counts) {
    this.counts = counts;
    setCountsIsSet(true);
    return this;
  }

  public void unsetCounts() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNTS_ISSET_ID);
  }

  /** Returns true if field counts is set (has been assigned a value) and false otherwise */
  public boolean isSetCounts() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNTS_ISSET_ID);
  }

  public void setCountsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNTS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case RECORD_ID:
      if (value == null) {
        unsetRecordId();
      } else {
        setRecordId((java.lang.Integer)value);
      }
      break;

    case PAPER_ID:
      if (value == null) {
        unsetPaperId();
      } else {
        setPaperId((java.lang.Integer)value);
      }
      break;

    case PAPER_NAME:
      if (value == null) {
        unsetPaperName();
      } else {
        setPaperName((java.lang.String)value);
      }
      break;

    case SUBJECT_ID:
      if (value == null) {
        unsetSubjectId();
      } else {
        setSubjectId((java.lang.Integer)value);
      }
      break;

    case AVG_COUNTS:
      if (value == null) {
        unsetAvgCounts();
      } else {
        setAvgCounts((java.lang.Integer)value);
      }
      break;

    case COUNTS:
      if (value == null) {
        unsetCounts();
      } else {
        setCounts((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case RECORD_ID:
      return getRecordId();

    case PAPER_ID:
      return getPaperId();

    case PAPER_NAME:
      return getPaperName();

    case SUBJECT_ID:
      return getSubjectId();

    case AVG_COUNTS:
      return getAvgCounts();

    case COUNTS:
      return getCounts();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case RECORD_ID:
      return isSetRecordId();
    case PAPER_ID:
      return isSetPaperId();
    case PAPER_NAME:
      return isSetPaperName();
    case SUBJECT_ID:
      return isSetSubjectId();
    case AVG_COUNTS:
      return isSetAvgCounts();
    case COUNTS:
      return isSetCounts();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TPracticeRecordAndPaperInfo)
      return this.equals((TPracticeRecordAndPaperInfo)that);
    return false;
  }

  public boolean equals(TPracticeRecordAndPaperInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_recordId = true;
    boolean that_present_recordId = true;
    if (this_present_recordId || that_present_recordId) {
      if (!(this_present_recordId && that_present_recordId))
        return false;
      if (this.recordId != that.recordId)
        return false;
    }

    boolean this_present_paperId = true;
    boolean that_present_paperId = true;
    if (this_present_paperId || that_present_paperId) {
      if (!(this_present_paperId && that_present_paperId))
        return false;
      if (this.paperId != that.paperId)
        return false;
    }

    boolean this_present_paperName = true && this.isSetPaperName();
    boolean that_present_paperName = true && that.isSetPaperName();
    if (this_present_paperName || that_present_paperName) {
      if (!(this_present_paperName && that_present_paperName))
        return false;
      if (!this.paperName.equals(that.paperName))
        return false;
    }

    boolean this_present_subjectId = true;
    boolean that_present_subjectId = true;
    if (this_present_subjectId || that_present_subjectId) {
      if (!(this_present_subjectId && that_present_subjectId))
        return false;
      if (this.subjectId != that.subjectId)
        return false;
    }

    boolean this_present_avgCounts = true;
    boolean that_present_avgCounts = true;
    if (this_present_avgCounts || that_present_avgCounts) {
      if (!(this_present_avgCounts && that_present_avgCounts))
        return false;
      if (this.avgCounts != that.avgCounts)
        return false;
    }

    boolean this_present_counts = true;
    boolean that_present_counts = true;
    if (this_present_counts || that_present_counts) {
      if (!(this_present_counts && that_present_counts))
        return false;
      if (this.counts != that.counts)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + recordId;

    hashCode = hashCode * 8191 + paperId;

    hashCode = hashCode * 8191 + ((isSetPaperName()) ? 131071 : 524287);
    if (isSetPaperName())
      hashCode = hashCode * 8191 + paperName.hashCode();

    hashCode = hashCode * 8191 + subjectId;

    hashCode = hashCode * 8191 + avgCounts;

    hashCode = hashCode * 8191 + counts;

    return hashCode;
  }

  @Override
  public int compareTo(TPracticeRecordAndPaperInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetRecordId()).compareTo(other.isSetRecordId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordId, other.recordId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPaperId()).compareTo(other.isSetPaperId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaperId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paperId, other.paperId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPaperName()).compareTo(other.isSetPaperName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaperName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paperName, other.paperName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSubjectId()).compareTo(other.isSetSubjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subjectId, other.subjectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAvgCounts()).compareTo(other.isSetAvgCounts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvgCounts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avgCounts, other.avgCounts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCounts()).compareTo(other.isSetCounts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCounts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.counts, other.counts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TPracticeRecordAndPaperInfo(");
    boolean first = true;

    sb.append("recordId:");
    sb.append(this.recordId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paperId:");
    sb.append(this.paperId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paperName:");
    if (this.paperName == null) {
      sb.append("null");
    } else {
      sb.append(this.paperName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subjectId:");
    sb.append(this.subjectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("avgCounts:");
    sb.append(this.avgCounts);
    first = false;
    if (!first) sb.append(", ");
    sb.append("counts:");
    sb.append(this.counts);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPracticeRecordAndPaperInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TPracticeRecordAndPaperInfoStandardScheme getScheme() {
      return new TPracticeRecordAndPaperInfoStandardScheme();
    }
  }

  private static class TPracticeRecordAndPaperInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<TPracticeRecordAndPaperInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPracticeRecordAndPaperInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RECORD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recordId = iprot.readI32();
              struct.setRecordIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PAPER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.paperId = iprot.readI32();
              struct.setPaperIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAPER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paperName = iprot.readString();
              struct.setPaperNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUBJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.subjectId = iprot.readI32();
              struct.setSubjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AVG_COUNTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.avgCounts = iprot.readI32();
              struct.setAvgCountsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COUNTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.counts = iprot.readI32();
              struct.setCountsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPracticeRecordAndPaperInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(RECORD_ID_FIELD_DESC);
      oprot.writeI32(struct.recordId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAPER_ID_FIELD_DESC);
      oprot.writeI32(struct.paperId);
      oprot.writeFieldEnd();
      if (struct.paperName != null) {
        oprot.writeFieldBegin(PAPER_NAME_FIELD_DESC);
        oprot.writeString(struct.paperName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SUBJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.subjectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AVG_COUNTS_FIELD_DESC);
      oprot.writeI32(struct.avgCounts);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COUNTS_FIELD_DESC);
      oprot.writeI32(struct.counts);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPracticeRecordAndPaperInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TPracticeRecordAndPaperInfoTupleScheme getScheme() {
      return new TPracticeRecordAndPaperInfoTupleScheme();
    }
  }

  private static class TPracticeRecordAndPaperInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<TPracticeRecordAndPaperInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPracticeRecordAndPaperInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRecordId()) {
        optionals.set(0);
      }
      if (struct.isSetPaperId()) {
        optionals.set(1);
      }
      if (struct.isSetPaperName()) {
        optionals.set(2);
      }
      if (struct.isSetSubjectId()) {
        optionals.set(3);
      }
      if (struct.isSetAvgCounts()) {
        optionals.set(4);
      }
      if (struct.isSetCounts()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetRecordId()) {
        oprot.writeI32(struct.recordId);
      }
      if (struct.isSetPaperId()) {
        oprot.writeI32(struct.paperId);
      }
      if (struct.isSetPaperName()) {
        oprot.writeString(struct.paperName);
      }
      if (struct.isSetSubjectId()) {
        oprot.writeI32(struct.subjectId);
      }
      if (struct.isSetAvgCounts()) {
        oprot.writeI32(struct.avgCounts);
      }
      if (struct.isSetCounts()) {
        oprot.writeI32(struct.counts);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPracticeRecordAndPaperInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.recordId = iprot.readI32();
        struct.setRecordIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.paperId = iprot.readI32();
        struct.setPaperIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.paperName = iprot.readString();
        struct.setPaperNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.subjectId = iprot.readI32();
        struct.setSubjectIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.avgCounts = iprot.readI32();
        struct.setAvgCountsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.counts = iprot.readI32();
        struct.setCountsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

